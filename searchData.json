[{"title":"让你的网站支持macOS和IOS的深色模式","url":"/website-darkmode-on-macos/","content":"\n## 前言\n\n如果你在使用 macOS 10.14.4 或者之后的系统，在系统内开启深色模式，打开 Safari 浏览器，你会发现我的博客变成了暗黑版本。\n\n<p class=\"success\">本文发表于2019-03-26，而在2019-06-04凌晨，Apple 发布了 IOS 13，本文所说的方法也同时适用于 IOS Safari</p>\n\n<p class=\"success\">2019-08-08 今天突然发现 Chrome 也支持了</p>\n\n深色模式（Dark Mode）是 Apple 在 macOS Mojave 上全新推出的一项功能，macOS 内置的 App 能完美支持，凭借着易用的接口，越来越多的第三方 App 已经进行了适配，可大家使用最多的浏览器却没能很好的支持，虽然你可以使用 Safari 的阅读视图浏览深色模式下的页面内容，但体验终归没有网站自身支持的好。\n\n原因主要有两个，一是浏览器没有给出让开发者适配的接口，二是网站设计并不统一，强行进入深色模式会破坏页面的设计和内容的可读性。\n\n于是经过几次的升级，macOS 终于在 Safari 12.1 中加入了一个新的媒体查询 `prefers-color-scheme`，并且 FireFox 67 也开始进行支持，其他浏览器的具体支持情况可在这里查看：https://caniuse.com/#search=prefers-color-scheme\n\n## 简单使用\n\n```\nName:   prefers-color-scheme\nFor:    @media\nValue:  no-preference | light | dark\n```\n\n- no-preference：无颜色偏好\n- light：浅色模式\n- dark：深色模式\n\n和你是用的其他媒体查询一样，用起来很简单\n\n```CSS\n@media (prefers-color-scheme: light) {\n    /* 浅色模式样式 */\n}\n\n@media (prefers-color-scheme: dark) {\n    /* 深色模式样式 */\n}\n```\n\n默认都是浅色模式的，所以我们只写深色模式的样式就行\n\n## 使用CSS变量\n\n现在也页面都会涉及到大量的样式，要适配深色模式，最好使用变量。\n\n```CSS\n:root {\n  --background-color: #FFFFFF;\n  --content-color: #15171A;\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --background-color: #222;\n    --content-color: #dfdfdf;\n  }\n}\n\n.main-page {\n    background: var(--background-color);\n}\n\n.full-content {\n    color: var(--content-color)\n}\n```\n\n上面的例子中，只定义了几个颜色相关的样式，事实上你可以跟其他媒体查询一样，定义其他的样式，让你的深色模式有更多不同的布局。\n\n## 颜色\n\n颜色这个就看自己喜欢了，不过要注意一点，如果你是使用 macOS 内置 App 的配色，强调色会改变一些基础配色，比如强调色不是石墨色的时候，背景颜色会变得比较暖。\n\n在设置颜色的时候，要保证内容的可读性，我们需要将文本和背景的颜色对比度保持在一个安全的范围内，这时候你需要用到这个工具： https://github.com/leaverou/contrast-ratio\n\n## 图片\n\n在写好颜色相关的样式之后，你会发现页面上的图片变得很刺眼，这时你可以降低一下图片的透明度，具体降多少也是看你背景设置的色深，另外可以设置一下鼠标悬停时恢复透明度，这样能有更好的体验。\n\n我用的 blazy 懒加载，所以是这样设置的\n\n```CSS\n@media (prefers-color-scheme: dark) {\n    .b-lazy.b-loaded {\n        opacity: .9;\n        transition: opacity .5s ease-in-out;\n    }\n\n    .b-lazy.b-loaded:hover {\n        opacity: 1;\n    }\n}\n```\n\n## 后话\n\n在深色模式推出之后，得到了不错的反响，我认为 IOS 13 会引入一定深色模式。另外，Windows 也有“暗”模式，相信越来越多的应用会进行这样深色模式的适配，在 macOS 10.14.4 升级之后，我在第一时间进行了博客主题更新，只有大家都用了这个新的媒体查询，才会推动其他平台和浏览器的适配，好东西值得推崇。\n\n>本文章发表于底噪博客 https://zhih.me , 转载请注明\n>直接偷的人，你打球真蔡\n\n","tags":["web","macOS"],"categories":["WEB"]},{"title":"卡梅隆这次翻车了？《阿丽塔：战斗天使》","url":"/https://mp.weixin.qq.com/s/j1peUPif3e6LgsH7iFEKaQ#a/","content":"\n《阿凡达》到现在已经有10年的了，当年那令人震撼的3D效果、逼真的场景开创了新3D时，并且仍是影史最高票房，全球票房27.88亿美元。\n\n最近卡梅隆的改编自漫画《铳梦》的电影《阿丽塔：战斗天使》上映了\n\n\n故事发生在2563年，300年前一场灾难性战争让地球彻底毁灭，整个世界只剩下一座“撒冷”天空城。\n\n![](https://pic.zhih.me/blog/posts/Alita-Battle-Angel/天空城.gif)\n\n上等人在“撒冷”中过着奢华的生活，每天清倒下来的垃圾是地表平民的重要物质，人们聚集于此，渐渐的形成了钢铁城。\n\n![](https://pic.zhih.me/blog/posts/Alita-Battle-Angel/垃圾场.jpg)\n\n平民只能生活在疮痍的废铁城中，为天空城工作并输送物资，两者通过几根连老鼠都不让过的管道连接。\n\n而上等人监视着地上的一切。\n\n每个生活在底层的人类，都梦想前往到这个近在眼前却又遥不可及的天空城，以过上更好的生活。\n\n![](https://pic.zhih.me/blog/posts/Alita-Battle-Angel/天空城1.jpg)\n\n机器人科学家依德博士在垃圾堆中发现了一个拥有完整人类大脑的残缺女性机器人，并修复了已经没有任何记忆的她，还用已故女儿的名字“阿丽塔”给她命名，阿丽塔有着惊人的战斗天赋，原来，她是300年前的火星狂战士。\n\n![](https://pic.zhih.me/blog/posts/Alita-Battle-Angel/捡到阿丽塔.jpg)\n\n阿丽塔对这个世界的一切都极具好奇心，好朋友雨果为她介绍一切，在相处中阿丽塔爱上了雨果。\n\n![](https://pic.zhih.me/blog/posts/Alita-Battle-Angel/和雨果.gif)\n\n雨果的梦想是进入天空城中过上富裕的生活，因此中了维克特的谎言，维克特也不过是 Nova 的一颗棋子罢了，而 Nova 想要得到阿丽塔的尸体。\n\n阿丽塔在一次次的战斗中自我觉醒，也回忆起曾经的任务：杀掉 Nova，而进入天空城的方式只有一个：参加机动球比赛并拿到冠军。\n\n![](https://pic.zhih.me/blog/posts/Alita-Battle-Angel/出拳.jpg)\n\n## 万众期待\n\n这就是被豆瓣评为2019最值得期待的外语电影之一。\n\n影迷们有这么大的期待，最大的原因就是被称为卡神的卡梅隆\n\n早在2000年卡神就有要出相关作品的动作，而在2003年传出了相关电影的消息，可是在2005、2006、2008、2009年，卡神在一次次的采访中表示电影推迟，这其中的很大原因就是《阿凡达》，也因此有《阿凡达》是为《阿丽塔》做技术铺垫的言论，在2010年卡神也因为《阿凡达》续集的项目把导演位置让给了罗伯特·罗德里格兹\n\n于是《阿丽塔》一拖再拖，直到最近才上映\n\n![](https://pic.zhih.me/blog/posts/Alita-Battle-Angel/卡梅隆.jpg)\n\n也许是期待过高，影迷们在看后纷纷表示整体平庸、剧情老套\n\n目前在豆瓣和IMDb上都只拿到了7.6分，烂番茄指数60%\n\n也有网友表示特效爆炸、值回票价，猫眼电影9分，爆米花指数94%\n\n![](https://pic.zhih.me/blog/posts/Alita-Battle-Angel/评分.jpg)\n\n## 这是一部优秀的科幻电影\n\n无论是CG特效、动作设计，都可以说是地球上最好的了，卡梅隆团队确实给大家带来了一场视觉盛宴\n\n这是我看过**最自然**的CG电影\n\n现在市面上有大量使用动作捕捉的影视作品，已经不算是什么新鲜玩意，但是大多数的看起来都不自然\n\n而阿丽塔就很自然，甚至让人感觉到 -- 真实\n\n![](https://pic.zhih.me/blog/posts/Alita-Battle-Angel/醒来.jpg)\n\n电影中有大量的和阿丽塔一样的合成人，所以会有大量的义肢，你会发现这些义肢的动作灵活自然，不会有强烈的机械感，就像“原装”似的\n\n![](https://pic.zhih.me/blog/posts/Alita-Battle-Angel/武术.gif)\n\n阿丽塔大量的面部特写，可以清晰的看到每个毛孔、睫毛和表情形成的褶皱\n\n而最令人惊讶的是那双水汪汪的大眼睛，瞳孔缩放时虹膜的变化，细节丰富得可怕，甚至能看到眼球反映的眼前场景\n\n![](https://pic.zhih.me/blog/posts/Alita-Battle-Angel/眼睛特写.gif)\n\n在眼泪滴落时那不规则的泪滴及泪痕也表现了出来\n\n其中一个镜头，阿丽塔和雨果在房顶上望向天空城，微风吹动头发，发丝在风中的运动\n\n还有一个情节，阿丽塔潜入水中拿狂战士装甲，水打湿阿丽塔，浸水后头发和衣物滴水的状况，和现实简直一样，这样的细节还有很多很多\n\n![](https://pic.zhih.me/blog/posts/Alita-Battle-Angel/取战甲.jpg)\n\n## 他们在创造技术\n\n不得不说，卡梅隆对技术的痴迷已经达到了疯狂。\n\n据说《阿丽塔》中的大量CG在市面上找不到现成的软件，他们只能自研算法、开发软件，对于那些受到技术限制的电影来说，针对性开发的优势不言而喻\n\n阿丽塔的眼珠特写镜头运用到了830万多边形数量的几何建模，一只眼睛由将近900万个像素制作，眼睛的近景镜头也没有用传统的动态贴图制作，而是完整的创建了包括虹膜内的丝模型在内的整个眼球结构\n\n![](https://pic.zhih.me/blog/posts/Alita-Battle-Angel/动作捕捉.jpg)\n\n比较可惜的是，剧组花大力气建造的城市实景，感觉没能在电影中完全表现出来\n\n![](https://pic.zhih.me/blog/posts/Alita-Battle-Angel/城市实景.jpg)\n\n只能通过一些俯瞰镜头，和远处望去的城市剪影展现。\n\n电影中大量追击打斗镜头，机动球大战、酒吧大战，混合着真人和CG角色的各种打斗，各种燃点爆点，爽炸了。\n\n![](https://pic.zhih.me/blog/posts/Alita-Battle-Angel/打斗.jpg)\n\n![](https://pic.zhih.me/blog/posts/Alita-Battle-Angel/死亡球.gif)\n\n## 剧情太糟糕了\n\n从制作和呈现的效果来说，这部电影已经相当优秀。\n\n于是剧本上的缺点被无限放大。\n\n我并不是原著党，我压根没看过原著，我相信有很多的人都和我一样，所以对原著中的世界观和设定一概不知。\n\n看完电影后，我产生了这样的感觉：女主笨、男主傻。\n\n他们都不讨我喜欢。\n\n![](https://pic.zhih.me/blog/posts/Alita-Battle-Angel/和雨果2.jpg)\n\n近两个小时的短暂时间里放入几场大战，还要注意人物自身的塑造和人物之间的关系发展，确实会有很多东西难以取舍。\n\n\n末日废土？\n\n300年前的大战快把地球毁灭，应该营造的是末日废土的氛围啊，我怎么感觉那里的人民生活得挺幸福？废铁城没那么糟糕，为什么人人向往天空城？\n\n路边竟然能买到巧克力吃，城市晚上还能看到万家灯火。。。\n\n\n在挂逼面前，敌人都是渣渣\n\n女主好任性啊，自己想干嘛就干嘛，对救命恩人也不尊重点，我希望她能可爱点，要不那双大眼睛岂不是浪费了\n\n她失忆了，可实力还在，她是火星狂战士，战斗天赋点满，没人能招惹她。\n\n轻松把坏人打趴，德智体美劳样样发展，身体被打坏了换上新的就好，没在怕的，新装备还有属性加成。\n\n还没打你就知道她会赢，这还有什么意思啊，看她的杂技表演，仿佛开了挂。\n\n\n个人英雄主义\n\n可能原著不是描述英雄的故事，但这部电影确实有这种感觉，却又不足，往常我们看的个人英雄主义电影，都能看到主角的自我觉醒和成长，破而后立。\n\n可《阿丽塔》，我没看到。\n\n\n父女关系\n\n依德博士把女儿的情感寄托在阿丽塔身上，在阿丽塔要换上狂战士装甲的时候反对了，在阿丽塔被格鲁依什卡打残后，帮换上狂战士装甲，再到阿丽塔参加机动球赛的时候，为阿丽塔制作轮滑亲自为之穿上，这些心理变化没有铺垫，转换得很僵硬。\n\n阿丽塔究竟是为什么而战，依德博士内心世界我也看不到。\n\n各种情感过渡，真是让我捉摸不透。\n\n\n恋爱线，败笔\n\n来到陌生的新世界，遇到一个帅气小哥，骑摩托带你兜风，带你玩轮滑扣篮，请你吃巧克力。\n\n然后你就爱上了他，愿意为他掏出心脏拿来还钱。\n\n小哥带你去领赏金猎人证书，带你到屋顶谈人生和理想，陪你你到酒吧闹事。\n\n甚至，骗你去参加死亡球赛，你还在想赚够钱带他去天空城。\n\n\n反派，无力吐糟\n\n在整部电影中没有哪个反派背景是被介绍明白了的，这使得人物很单薄。\n\n烂俗剧情，毫无新意。\n\n\n总结\n\n把日式热血漫画强行改编成美国个人英雄主义电影，不喜欢。\n\n《攻壳机动队》已是前车之鉴，缺少情感铺垫，苍白的角色也不讨喜，无法让观众产生共情，只能是一部纯粹的“特效大片”。\n\n情节上太多东西没能交代清楚，也没有跌宕起伏的感觉，《阿丽塔》实在是可惜。\n\n虽说炫酷的画面和激烈的打斗还没达到瑕不掩瑜的地步，但爽是真爽。\n\n卡梅隆虽然不是导演，但作为监制，依旧让大家看到了用心。\n\n特别是在今天，人们进入影院选择看科幻电影，就是为了寻找感官上丰富的刺激。\n\n在这一点上，《阿丽塔》作为电影工业的顶级产品，可谓是诚意满满。\n\n>本文章发表于底噪博客 https://zhih.me , 转载请注明\n>直接偷的人，你打球真蔡\n","categories":["影评"]},{"title":"ZeroTier内网穿透教程","url":"/zerotier-getting-started/","content":"\n## 前言\n\n有时候需要在外边访问家里的设备，而众所周知一般家里都没有固定 IP 的，这时候就要内网穿透了，说到穿透的时候，大家都会提到 DDNS(动态域名解析)，或者使用反向代理的方式如 FRP、Ngrok。\n\n首先说说 DDNS，这种方式使用起来很方便，只要设置好相应的服务提供商的 API，就能做到每次 IP 变化后自动解析，这样不管家里 IP 怎么变，用域名都能访问回家。这里最大的硬伤就是**公网IP**，有些朋友的带宽就是个大局域网，路由器只能获取到上一级内网的 IP，这时就 GG 了。\n\n然后是 FRP、Ngrok 这样的反向代理程序，通过服务器转发数据来达到外网访问的目的，这样就需要自己有个 VPS，或者使用他人搭建的服务，据我所知的免费服务都是限速的，要是自己搭建的话，体验就要看服务器的**网络质量**了。\n\n现在我们就来看看，**不需要公网 IP，不依赖服务端网络性能的 ZeroTier**。\n\n## 简介\n\n[ZeroTier 官网](https://www.zerotier.com)上说\n\n>ZeroTier is a smart Ethernet switch for planet Earth.\n\n!!! 适用于地球的智能网络交换机 ...\n\n它是一个分布式网络虚拟机管理程序，建立在加密安全的全球对等网络之上。它提供与企业 SDN 交换机同等的高级网络虚拟化和管理功能，而且可以跨本地和广域网并连接几乎任何类型的应用程序或设备。\n\n好吧😥，有点牛逼\n\n而说到主要功能，就是可以把多个不同网络的设备连接在一起，用来就像在一个局域网下\n\n例如，我在路由器上装了 ZeroTier，路由器挂了一个硬盘，而现在我在外边想要访问这个硬盘，那么只需要运行电脑上的 ZeroTier，就能通过 Samba、FTP 等方式访问硬盘，而且看起来就像我就在家里一样。\n\n## 基本原理介绍\n\n说白了就是 P2P(Peer to Peer)，而且组织方式很像 DNS(关于 DNS 可以看[这里](https://zhih.me/how-the-web-works/#DNS-%E6%9F%A5%E8%AF%A2))\n\n根服务器 R 记录了路径信息，设备 A 能通过**ZeroTier唯一地址标识**找到需要连接的设备 B\n\n这个过程如下：\n\n1. A 想要将数据包发送到 B，但由于它没有直接路径，因此将其向上发送到 R。\n2. 如果 R 有直接链接到 B，它会转发数据包给 B。否则它会继续向上游发送数据包，直到达到行星根(planet)。行星根知道所有节点，所以如果 B 在线，最终数据包将到达 B。\n3. R 还向 A 发送一个名为**会和**的消息，包含有关它如何到达 B 的提示。同时，将**会和**发给 B，通知 B 它如何到达 A。\n4. A 和 B 获取它们的会合消息并尝试相互发送测试消息，可能会对 NAT 或状态防火墙进行穿透。如果这样可以建立直接链路，则不再需要中继。\n5. 如果无法建立直接路径，则通信可以继续中继(速度慢)\n\nZeroTier 官方搭建了一个行星根服务器叫做地球 Earth，行星根服务器唯一的且是免费的，它记录了所有的路径信息，一般情况下大家都直接用的这个。除此之外还有 12 个遍布全球的根服务器，这些是收费的服务。所以如果使用免费套餐，连接时的延迟可能会很高，另外由于 Earth 在国外，一些不确定因素可能会影响到使用。考虑到网络的不确定性，ZeroTier 能自己创建根服务器月球 Moons，这样就能在大局域网中得到更好的体验了。\n\n## 安装\n\nZeroTier 是跨平台的，能安装在几乎任何平台\n\nWindows、macOS、Linux、iOS、Android、QNAP、Synology、西数 MyCloud NAS，下载地址：https://www.zerotier.com/download.shtml\n\n路由器推荐安装 [Entware](https://zhih.me/tags/entware/) 后使用 `opkg install zerotier` 命令安装\n\n## ZeroTier使用教程\n\n因为我们没有自己创建 Moons 服务器，现在就先使用 ZeroTier 提供的服务\n\n### 注册\n\n地址：https://my.zerotier.com/\n\n![注册](https://pic.zhih.me/blog/posts/zerotier-getting-started/create-account.jpg)\n\n注册之后是这样的，保持默认就好，免费套餐能连接 100 个设备，一般人够用了\n\n![账户](https://pic.zhih.me/blog/posts/zerotier-getting-started/account.jpg)\n\n### 创建网络\n\n![创建网络](https://pic.zhih.me/blog/posts/zerotier-getting-started/create-network.jpg)\n\n创建一个新的网络之后，我们得到一个 Network ID，这个在后面的设备连接时需要用到，点击刚刚创建的网络我们可以设置更多选项\n\n![网络设置](https://pic.zhih.me/blog/posts/zerotier-getting-started/network-setting.jpg)\n\n默认的设置就可以用了，右边 IPv4 的设置就是分配设备内网 IP 网段，其他的设置可以在 Setting help 里看到说明，不了解的不建议乱设置，如果不小心把自己的网络暴露在外部，会相当危险\n\n### 连接\n\n直接在客户端输入刚才创建的 Network ID\n\n**电脑**\n\n![macOS](https://pic.zhih.me/blog/posts/zerotier-getting-started/macos-join.jpg)\n\n**路由器**\n\n我这里使用的是安装了 [Entware](https://zhih.me/tags/entware/) 的 LEDE\n\n```bash\n# 启动\nzerotier-one -d\n\n# 获取地址和服务状态\nzerotier-cli status\n\n# 加入、离开、列出网络\nzerotier-cli join # Network ID\nzerotier-cli leave # Network ID\nzerotier-cli listnetworks\n```\n\n### 允许连接\n\n后台设置默认是需要 Auth 才能连接的，在客户端申请加入网络后，需要在后台允许一下\n\n![允许加入](https://pic.zhih.me/blog/posts/zerotier-getting-started/members.jpg)\n\n### 测试连接\n\n为了测试不同网络访问，我添加了一台安卓手机，在移动网络下直接使用分配给路由器的 IP，连接了 ssh 和 [onmp](https://zhih.me/tags/onmp/) 创建的 PHP 探针页面，而且速度还算不错，宽带是电信的，手机是联通的，下文件时能有个 800k/s，不知道瓶颈在哪\n\n![安卓](https://pic.zhih.me/blog/posts/zerotier-getting-started/android-test.jpg)\n\n## 结语\n\n目前 IPv6 还没得到普及，虽然我这里已经能有 IPv6 地址并且能 IPv6 站点了，奈何不是固定 IP，也不知道哪时才能人手一个固定 IP。就目前情况来看，使用 ZeroTier 来做内网穿透还是不错的，使用门槛较低，可用性也还行，值得一试。 \n\n>本文章发表于底噪博客 https://zhih.me , 转载请注明\n>直接偷的人，你打球真蔡\n\n\n\n","tags":["Linux","内网穿透"],"categories":["教程"]},{"title":"给你的Nginx加个防火墙","url":"/ngx-lua-waf/","content":"\n## 引言\n\n前几天有个朋友跟我说，他的一个 WordPress 站经常访问慢。\n\n帮他看了一下日志，发现整天被人扫网站目录的什么 phpmyadmin 或者 SQL 文件，要不就是被 CC，刚开始我还以为是主机商帮扫漏洞之类的，后来发现实在是太密集了，看来不是。\n\n我就笑了，他那破站有啥值得扫的，不过 CC 的话倒也不奇怪，有些人就是爱搞这些无聊的事情。\n\n然后他又说，用的是腾讯云的1元小鸡，刚开始非常流畅的啊，不至于现在这么惨吧。\n\n我看了一下真搞笑，本身机器性能就不行了，还不做静态化，被 CC 的时候负载自然上去了，而且小鸡才 1M 的带宽，不慢才怪。\n\n他说他的站就写写笔记或者转载一些文章，也不是什么重要的东西，但是整天被搞也是不太爽，怎么弄才能解决。。。\n\n我想也是，虽然东西是垃圾，但好歹还是在用的，不过嘛解决是不可能解决的，只要别人能访问，你就会遇到这样那样的傻逼，不过改善还是可以啦。既然主机商的各种安全套餐咱们用不起，那就用一些大佬写好的方案吧。\n\n找了一下，发现 ngx_lua_waf 是个不错的方案，但是太久不更新了，而且代码我看不懂，猝\n\n最后找到 oneinstack 一键包内置的 ngx_lua_waf，基于之前的代码，不过重构 了，这下我能看懂了，以后要修改也能简单一些\n\n## 介绍\n\n[ngx_lua_waf](https://github.com/xzhih/ngx_lua_waf) 是一个高性能的轻量级 web 应用防火墙，基于 lua-nginx-module。\n\n![ngx_lua_waf](https://pic.zhih.me/blog/posts/ngx-lua-waf/waf.jpg)\n\n它具有以下功能：\n\n```\n防止sql注入，本地包含，部分溢出，fuzzing测试，xss,SSRF等web攻击\n防止svn/备份之类文件泄漏\n防止ApacheBench之类压力测试工具的攻击\n屏蔽常见的扫描黑客工具，扫描器\n屏蔽异常的网络请求\n屏蔽图片附件类目录php执行权限\n防止webshell上传\n```\n\n经过 [unixhot](https://github.com/unixhot/waf) 的修改和重构，拥有了以下功能：\n\n```\n支持IP白名单和黑名单功能，直接将黑名单的IP访问拒绝\n支持URL白名单，将不需要过滤的URL进行定义\n支持User-Agent的过滤，匹配自定义规则中的条目，然后进行处理（返回403）\n支持CC攻击防护，单个URL指定时间的访问次数，超过设定值，直接返回403\n支持Cookie过滤，匹配自定义规则中的条目，然后进行处理（返回403）\n支持URL过滤，匹配自定义规则中的条目，如果用户请求的URL包含这些，返回403\n支持URL参数过滤，原理同上\n支持日志记录，将所有拒绝的操作，记录到日志中去\n日志记录为JSON格式，便于日志分析，例如使用ELKStack进行攻击日志收集、存储、搜索和展示\n```\n\n这些功能刚好能满足我朋友的需求\n\n## 安装\n\n安装起来也是相当容易，说白了就是给 nginx 增加 ngx_devel_kit、lua-nginx-module 这两个模块，然后再修改 nginx 配置来运行 ngx_lua_waf。\n\n### 一键安装\n\n一键命令我已经给你们准备好了，一键命令会编译 nginx-1.15.6，编译的详细模块可以看我的这篇帖子 https://zhih.me/make-your-website-support-tls1-3 ，当然你也可以直接看脚本的代码\n\n```\nsh -c \"$(curl -kfsSl https://raw.githubusercontent.com/xzhih/nginx-compile/master/install.sh)\"\n```\n\n### 手动安装\n\n#### 下载 ngx_lua_waf 防火墙的各种依赖及模块\n\n```bash\ncd /usr/src/\nwget https://github.com/openresty/luajit2/archive/v2.1-20181029.tar.gz\ntar xzvf v2.1-20181029.tar.gz\nmv luajit2-2.1-20181029 luajit-2.1\n\nwget https://github.com/openresty/lua-cjson/archive/2.1.0.6.tar.gz\ntar xzvf 2.1.0.6.tar.gz\nmv lua-cjson-2.1.0.6 lua-cjson\n\nwget https://github.com/simplresty/ngx_devel_kit/archive/v0.3.1rc1.tar.gz\ntar xzvf v0.3.1rc1.tar.gz\nmv ngx_devel_kit-0.3.1rc1 ngx_devel_kit\n\nwget https://github.com/openresty/lua-nginx-module/archive/v0.10.13.tar.gz\ntar xzvf v0.10.13.tar.gz  \nmv lua-nginx-module-0.10.13 lua-nginx-module\n```\n\n#### 编译安装 luajit\n\n```bash\ncd luajit-2.1\nmake -j2 && make install\necho '/usr/local/lib' >> /etc/ld.so.conf.d/local.conf\nldconfig\n```\n\n#### 编译安装 lua-cjson\n\n```bash\ncd /usr/src/lua-cjson\nexport LUA_INCLUDE_DIR=/usr/local/include/luajit-2.1 \nmake -j2 && make install\n```\n\n#### 设置 LUAJIT 环境变量\n\n```bash\nexport LUAJIT_LIB=/usr/local/lib\nexport LUAJIT_INC=/usr/local/include/luajit-2.1\n```\n\n#### 编译 nginx 的时候加上以下两个模块\n\n```bash\n--add-module=../lua-nginx-module\n--add-module=../ngx_devel_kit\n```\n\n#### 下载配置 ngx_lua_waf\n\n```bash\ncd /usr/local/nginx/conf/\ngit clone https://github.com/xzhih/ngx_lua_waf.git waf \n\ncat > /usr/local/nginx/conf/waf.conf << EOF\nlua_shared_dict limit 20m;\nlua_package_path \"/usr/local/nginx/conf/waf/?.lua\";\ninit_by_lua_file \"/usr/local/nginx/conf/waf/init.lua\";\naccess_by_lua_file \"/usr/local/nginx/conf/waf/access.lua\";\nEOF\n\nmkdir -p /usr/local/nginx/logs/waf \nchown www-data:www-data /usr/local/nginx/logs/waf \n```\n\n你可以在 `/usr/local/nginx/logs/waf` 找到防火墙日志\n\n#### 在 `nginx.conf` 里 include `waf.conf`\n\n```\ninclude waf.conf;\n```\n\n启动 nginx 并访问 http://你的IP/?a=a.sql \n\n就可以看到防火墙提示了\n\n## Copyright\n\nhttps://github.com/lj2007331/ngx_lua_waf\n\nhttps://github.com/loveshell/ngx_lua_waf\n\nhttps://github.com/unixhot/waf\n\n>本文章发表于底噪博客 https://zhih.me , 转载请注明\n>直接偷的人，你打球真蔡\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["nginx","web"],"categories":["教程"]},{"title":"使用acme.sh获取免费SSL证书","url":"/acme-sh-guide/","content":"\n## 引言\n\n[acme.sh](https://github.com/Neilpang/acme.sh) 是一个 ACME(自动化证书管理环境) 脚本，可以从 letsencrypt 生成免费的证书。\n\n本来这个教程是写在 [编译Nginx支持TLS1.3](https://zhih.me/make-your-website-support-tls1-3/) 那篇帖子里的，后来感觉还是单独拿出来比较好，即能让那篇教程更简洁，也能更方便的让需要的人看到这个教程。\n\n## 安装工具\n\n```bash\napt-get install cron socat -y\n```\n\n## 获取 acme.sh\n\n```bash\ncurl  https://get.acme.sh | sh \n```\n\n重启终端，如果你使用 zsh 可以这样 `source ~/.zshrc`\n\n## 生成证书\n\n使用 http 方式验证域名，需要先搭建 HTTP 站点，这里使用 acme.sh 自带的 webserver，所以先把 nginx 停掉\n\n```bash\nservice nginx stop\n```\n\n接下来指定域名，开始签发\n\n```bash\nacme.sh --issue -d onmp.ooo \\\n        --keylength ec-256 \\\n        --standalone\n```\n\n如果是多域名，可以使用 -d 参数添加，如：`-d www.onmp.ooo` \n`--keylength ec-256` 是签发 ECC 类型的证书，它的安全性更高，删除则使用默认的 RSA 证书\n\n\n## 复制证书\n\n证书已经签发了，不过默认是保存在 `~/.acme.sh/` 里\n\n```bash\nacme.sh --ecc --installcert -d onmp.ooo \\\n        --key-file /usr/local/nginx/conf/ssl/onmp.ooo.key \\\n        --fullchain-file /usr/local/nginx/conf/ssl/onmp.ooo.cer \\\n        --reloadcmd \"service nginx restart\"\n```\n\n指定域名，指定证书保存目录，我这里设置在 `/usr/local/nginx/conf/ssl/`，指定 Nginx 重载命令，如果签发的不是 ECC 证书，把 `--ecc` 参数去掉\n\n这样使用 acme.sh 就完成了证书的签发，如果证书快要过期了，脚本会自动更新证书\n\n脚本自动更新，可以使用以下命令\n\n```bash\nacme.sh --upgrade --auto-upgrade \n```\n\n## 证书安装\n\n证书已经获取并且可以自动更新了，具体安装方法看 [编译Nginx支持TLS1.3](https://zhih.me/make-your-website-support-tls1-3/) \n\n>本文章发表于底噪博客 https://zhih.me , 转载请注明\n>直接偷的人，你打球真蔡\n","tags":["nginx","https","web"],"categories":["教程"]},{"title":"编译Nginx支持TLS1.3","url":"/make-your-website-support-tls1-3/","content":"\n## 引言\n\nTLS1.2 发布于 2008 年 8 月，至今正好有 10 年，随着互联网安全越来越受到重视，新协议 TLS1.3 呼之欲出。值得一提的是，从第一份草案编写至今，已经有几年时间了，截止这篇文章编写，已经是第 28 份草案。在最近的 Chrome 版本更新中也逐步对 TLS1.3 进行支持，Chrome 65 开始默认开启 draft 23、Chrome 68 开始支持 draft 28\n\n>更新：TLS 1.3 标准已于 2018 年 8 月正式发布为 [ RFC 8446 ](https://tools.ietf.org/html/rfc8446)，距 TLS1.2 发布正好 10 周年\n\nTLS1.3 对于 TLS1.2 有重大改写，既提高了安全性又提高了速度，以至于有争议称，应该把它叫做 TLS2.0\n\n关于 TLS1.3 的科普可以看下面的页面\n\nhttps://wiki.openssl.org/index.php/TLS1.3 \nhttps://zhuanlan.zhihu.com/p/28850798\n\n之前我也写过 Nginx 的 https 的配置 https://zhih.me/nginx-http2-https/ ，当时是使用 TLS1.2 的\n\n碰巧前几天发现 `.ooo` 可以免费用 1 年，就撸了一个 `onmp.ooo` 来做为我 onmp 项目的页面，把它搭在 4 刀年付的 virmach 上，顺便测试 TLS1.3\n\n## 一键安装\n\n最近更新支持防火墙功能，详情可以看 https://zhih.me/ngx-lua-waf/\n\n```bash\nsh -c \"$(curl -kfsSl https://raw.githubusercontent.com/xzhih/nginx-compile/master/install.sh)\"\n```\n\n## 安装\n\n我这里用的系统是 Debian 8\n\n### 安装依赖\n\n```bash\napt-get install git gcc make build-essential -y\n```\n\n### 下载源码\n\n我们把源码全都放在一个地方，方便使用，创建 nginx 的运行用户 www-data\n\n```bash\nrm -rf /usr/src/\nmkdir -p /usr/src/\nmkdir -p /var/log/nginx/\nuseradd -s /sbin/nologin -M www-data\n```\n\n**克隆 OpenSSL**\n\n这里用的是 1.1.1 稳定版的源码\n\n```bash\ncd /usr/src\nwget https://github.com/openssl/openssl/archive/OpenSSL_1_1_1.tar.gz \ntar xzvf OpenSSL_1_1_1.tar.gz\nmv openssl-OpenSSL_1_1_1 openssl\n```\n\n**下载 Nginx 的源码**\n\n```bash\ncd /usr/src/\nwget https://nginx.org/download/nginx-1.15.6.tar.gz\ntar zxf ./nginx-1.15.6.tar.gz \nmv nginx-1.15.6 nginx\n```\n\n**克隆 zlib**\n\n开启 gzip 要用到 zlib 库，这里使用的是 Cloudflare 优化的版本，比原版具有更高的压缩性能\n\n```bash\ncd /usr/src/\ngit clone https://github.com/cloudflare/zlib.git zlib\ncd zlib\nmake -f Makefile.in distclean\n```\n\n**克隆 Brotli**\n\n就像 gzip 一样，Brotli 也是一种压缩算法，它是由谷歌开发的一个更适合文本压缩的算法，因为它使用了字典，所以有更好的压缩比。\n\n现在主流浏览器都已经支持 Brotli 了，而且也能与 gzip 共存，如果浏览器支持 Brotli 就会优先使用，所以可以放心兼容性，可以在这里看到支持的数据 https://caniuse.com/#search=Brotli\n\n```bash\ncd /usr/src/\ngit clone --recursive https://github.com/google/ngx_brotli.git\n```\n\n我给 nginx 默认配置的 Brotli 压缩等级为 6 级，这对于动态内容比较友好，如果你是像我现在这个博客一样是静态化的，那么建议开启 11 级压缩，这样可以获得最好的体验\n\n**下载 PCRE**\n\nnginx rewrite 模块需要 pcre 库 \n\n```bash\ncd /usr/src/\nwget https://ftp.pcre.org/pub/pcre/pcre-8.42.tar.gz\ntar zxf ./pcre-8.42.tar.gz\n```\n\n### 给 OpenSSL 打补丁\n\n补丁来自：https://github.com/hakasenyang/openssl-patch\n\n此补丁的目的是让 OpenSSL 支持 TLS1.3 的 23,26,28 草案，以及 Final 版标准\n\n```bash\ncd /usr/src/\ngit clone https://github.com/hakasenyang/openssl-patch.git\ncd /usr/src/openssl \npatch -p1 < ../openssl-patch/openssl-equal-1.1.1_ciphers.patch\npatch -p1 < ../openssl-patch/openssl-1.1.1-chacha_draft.patch\n```\n\n### 给 Nginx 打补丁\n\n补丁来自：https://github.com/kn007/patch\n\nnginx 补丁\n  - 添加SPDY支持。\n  - 添加HTTP2 HPACK编码支持。\n  - 添加动态TLS记录支持。\n\nnginx_auto_using_PRIORITIZE_CHACHA 补丁 \n  - 支持时使用 SSL_OP_PRIORITIZE_CHACHA\n\n```bash\ncd /usr/src/\ngit clone https://github.com/kn007/patch.git nginx-patch\ncd /usr/src/nginx\npatch -p1 < ../nginx-patch/nginx.patch \npatch -p1 < ../nginx-patch/nginx_auto_using_PRIORITIZE_CHACHA.patch\n```\n\n### 使用 jemalloc 作为内存管理\n\n```bash\ncd /usr/src/\nwget https://github.com/jemalloc/jemalloc/releases/download/5.1.0/jemalloc-5.1.0.tar.bz2\ntar xjvf jemalloc-5.1.0.tar.bz2\ncd jemalloc-5.1.0\n./configure\nmake && make install\necho '/usr/local/lib' >> /etc/ld.so.conf.d/local.conf\nldconfig\n```\n\n### 其他编译配置\n\nNginx 默认会以 debug 模式编译，我们需要注释掉 `/usr/src/nginx/auto/cc/gcc` 中 `CFLAGS=\"$CFLAGS -g\"` 这行，这样可以减少生成文件的大小\n\n```bash\nsed -i 's@CFLAGS=\"$CFLAGS -g\"@#CFLAGS=\"$CFLAGS -g\"@' /usr/src/nginx/auto/cc/gcc\n```\n\n### 编译安装\n\n```bash\ncd /usr/src/nginx\n./configure \\\n--user=www-data --group=www-data \\\n--prefix=/usr/local/nginx \\\n--sbin-path=/usr/sbin/nginx \\\n--with-compat --with-file-aio --with-threads \\\n--with-http_v2_module --with-http_v2_hpack_enc \\\n--with-http_spdy_module --with-http_realip_module \\\n--with-http_flv_module --with-http_mp4_module \\\n--with-openssl=../openssl --with-http_ssl_module \\\n--with-pcre=../pcre-8.42 --with-pcre-jit \\\n--with-zlib=../zlib --with-http_gzip_static_module \\\n--add-module=../ngx_brotli \\\n--with-ld-opt=-ljemalloc\n\nmake \nmake install\n```\n\nNginx 的可执行文件安装在 `/usr/sbin/nginx` ，Nginx 配置在 `/usr/local/nginx/conf/` 里\n\n## 配置\n\nNginx 已经安装上了，现在我们来配置网站，让它跑起来\n\n### Nginx 全局配置\n\n把以下内容覆盖填入 `/usr/local/nginx/conf/nginx.conf` \n\n```\nuser www-data;\npid /var/run/nginx.pid;\nworker_processes auto;\nworker_rlimit_nofile 65535;\n\nevents {\n    use epoll;\n    multi_accept on;\n    worker_connections 65535;\n}\n\nhttp {\n    charset utf-8;\n    sendfile on;\n    aio threads;\n    directio 512k;\n    tcp_nopush on;\n    tcp_nodelay on;\n    server_tokens off;\n    log_not_found off;\n    types_hash_max_size 2048;\n    client_max_body_size 16M;\n\n    # MIME\n    include mime.types;\n    default_type application/octet-stream;\n\n    # Logging\n    access_log /var/log/nginx/access.log;\n    error_log /var/log/nginx/error.log warn;\n\n    # Gzip\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types text/plain text/css text/xml application/json application/javascript application/xml+rss application/atom+xml image/svg+xml;\n    gzip_disable \"MSIE [1-6]\\.(?!.*SV1)\";\n\n    # Brotli\n    brotli on;\n    brotli_comp_level 6;\n    brotli_static on;\n    brotli_types text/plain text/css text/xml application/json application/javascript application/xml+rss application/atom+xml image/svg+xml;\n\n    include vhost/*.conf;\n}\n```\n\n### Nginx 站点配置\n\n我们已经在全局配置里设置了包含 `/usr/local/nginx/conf/vhost/` 目录下的 conf 文件\n\n```bash\nmkdir -p /usr/local/nginx/conf/vhost/\n```\n\n然后在 `/usr/local/nginx/conf/vhost/` 里创建站点配置，比如我的是 `onmp.ooo.conf` \n\n```\nserver {\n  listen 80;\n  server_name onmp.ooo;\n  root /wwwroot/onmp.ooo;\n  location / {\n    index  index.html;\n  }\n}\n```\n\n这样 HTTP 的站点配置就弄好了，不过还站点还没页面，我们把 Nginx 的欢迎也面给放进去\n\n```bash\nmkdir -p /wwwroot\ncp -r /usr/local/nginx/html /wwwroot/onmp.ooo\n\n# 配置站点目录权限\nchown -R www-data:www-data /wwwroot/\nfind /wwwroot/ -type d -exec chmod 755 {} \\;\nfind /wwwroot/ -type f -exec chmod 644 {} \\;\n```\n\n### service 配置\n\nservice 命令用于对系统服务进行管理，比如启动（start）、停止（stop）、重启（restart）、查看状态（status）等，我们是编译安装的，所以要手动创建服务文件。\n\n```bash\nmkdir -p /usr/lib/systemd/system/\n```\n\n编辑 `/usr/lib/systemd/system/nginx.service` 写入以下内容\n\n```\n[Unit]\nDescription=nginx - high performance web server\nAfter=network.target\n\n[Service]\nType=forking\nPIDFile=/var/run/nginx.pid\nExecStartPost=/bin/sleep 0.1\nExecStartPre=/usr/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf\nExecStart=/usr/sbin/nginx -c /usr/local/nginx/conf/nginx.conf\nExecReload=/usr/sbin/nginx -s reload\nExecStop=/usr/sbin/nginx -s stop\n\n[Install]\nWantedBy=multi-user.target\n```\n\n启动服务\n\n```bash\nsystemctl daemon-reload #重载\nsystemctl enable nginx #开机启动\nsystemctl start nginx #运行\n```\n\n我们现在可以用 `service` 或 `systemctl` 管理 nginx 了\n\n启动 Nginx 后 HTTP 页面就正常了，打开 onmp.ooo 就能看到 Welcome to nginx!\n\n### 签发证书\n\n配置 HTTPS 首先要有证书，我这里是使用 [acme.sh](https://github.com/Neilpang/acme.sh) 自动颁发 Let’s Encrypt 的证书\n\n具体使用教程看我的另一篇教程 [使用acme.sh获取免费SSL证书](https://zhih.me/acme-sh-guide/)\n\n当然，你要是已经有了 SSL 证书，直接看下面配置文件里证书存放的目录，直接放到里面去就行，其他操作一样的\n\n### HTTPS 站点配置\n\n因为我给 OpenSSL 打的是 equal-1.1.1_ciphers 补丁，所以 ssl_ciphers 配置文件如下，如果你打的是别的补丁，则需要查看 https://github.com/hakasenyang/openssl-patch 给的配置\n\n```\nserver {\n    listen 80;\n    server_name onmp.ooo;\n    return 301 https://onmp.ooo$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name onmp.ooo;\n    root /wwwroot/onmp.ooo;\n\n    # SSL\n    ssl_certificate         /usr/local/nginx/conf/ssl/onmp.ooo.cer;\n    ssl_certificate_key     /usr/local/nginx/conf/ssl/onmp.ooo.key;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers '[TLS13+AESGCM+AES128|TLS13+AESGCM+AES256|TLS13+CHACHA20]:[EECDH+ECDSA+AESGCM+AES128|EECDH+ECDSA+CHACHA20]:EECDH+ECDSA+AESGCM+AES256:EECDH+ECDSA+AES128+SHA:EECDH+ECDSA+AES256+SHA:[EECDH+aRSA+AESGCM+AES128|EECDH+aRSA+CHACHA20]:EECDH+aRSA+AESGCM+AES256:EECDH+aRSA+AES128+SHA:EECDH+aRSA+AES256+SHA:RSA+AES128+SHA:RSA+AES256+SHA:RSA+3DES';\n    ssl_ecdh_curve X25519:P-256:P-384;\n    ssl_prefer_server_ciphers on;\n\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_timeout 1d;\n    ssl_session_tickets on;\n\n    # OCSP Stapling\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    resolver 119.29.29.29 8.8.8.8 valid=300s;\n    resolver_timeout 10s;\n\n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header Referrer-Policy \"no-referrer-when-downgrade\" always;\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\" always;\n\n    location / {\n      index  index.html;\n      http2_push /style.css;\n    }\n\n    location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|ico)$ {\n      expires 30d;\n    }\n\n    location ~ .*\\.(js|css)?$ {\n      expires 15d;\n    }\n}\n```\n\n以上就是完整的站点配置文件，覆盖 `/usr/local/nginx/conf/vhost/onmp.ooo.conf` 后，使用 `service nginx reload` 重载 Nginx 再打开站点就能看到 HTTPS 的页面了\n\n## 验证\n\n在 Chrome 65 或更新的版本中，打开开发者工具的 Security 菜单，就能在里面看到 站点是否以 TLS1.3 连接\n\n![chrome](https://pic.zhih.me/blog/posts/make-your-website-support-tls1.3/chrome.jpg)\n\n或者可以到 SSL Server Test：https://www.ssllabs.com/ssltest/index.html 进行测试\n\n![ssllabs](https://pic.zhih.me/blog/posts/make-your-website-support-tls1.3/ssllabs.jpg)\n\n我只开启了 TLSv1.2 TLSv1.3 的支持，如果需要，你可以自己增加其他协议的支持\n\n## 结语\n\n人们的生活已经离不开网络，所以网络安全在现在和未来都至关重要，曾经很多站长都以 HTTPS 影响站点速度为由，又或者说 SSL 证书昂贵，拒绝配 HTTPS，而随着技术的迭代升级，配置 HTTPS+HTTPS2 能提高网站速度，而 SSL 不仅可以免费获取，还可以使用命令自动获取自动更新，在我看来已经没有理由不配置 HTTPS 了，所以希望各位站长，都赶紧上车吧\n\n>本文章发表于底噪博客 https://zhih.me , 转载请注明\n>直接偷的人，你打球真蔡\n\n\n\n","tags":["nginx","https","web"],"categories":["教程"]},{"title":"Syncthing就是我要的同步备份软件","url":"/syncthing-the-best/","content":"\n## 引言\n\n数据无价，平时不注意备份，电脑突然翻车就追悔莫及啦。\n\n最开始的时候，我在路由器上开启 Samba，每次编辑完项目就手动拷贝到路由器硬盘里，麻烦程度可想而知，后来又用了 Google Drive/One Drive，又因为它们的网络不理想，就又放弃使用了。\n\n其实就是很简单的需求，自动备份、速度快，然后去找了一下，发现一堆人推荐用 Rsync，这货我只在 VPS 上用过，拿来做镜像同步，但是要做实时同步，不好配置。\n\n我就想，这需求应该有一大堆人有吧，就去 github 搜索 sync，发现 Syncthing 这么个好东西，截止 2018-06-13 已经得到 20k+ 的 star，并且更新很活跃\n\n## 介绍\n\n![logo](https://pic.zhih.me/blog/posts/syncthing-the-best/logo.jpg)\n\nSyncthing 是一个文件连续同步软件\n\n项目地址：https://github.com/syncthing/syncthing\n\n它有以下特性：\n\n- 跨平台\n    - 使用 Golang 开发，几乎能在所有平台上使用，包括常见的安卓手机和路由器平台\n\n- 易于使用\n    - 只需要下载运行，打开浏览设置本地目录和远程主机，其他的不需要管\n    \n- 安全\n    - 管理页可以设置密码，可以设置 https，设置备份需要两边都确认，使用唯一设备标识进行确认\n\n## 安装\n\nSyncthing 有多种安装方式\n\n有一定 Linux 基础的人，可以使用下面的配置来设置启动服务\n\n- https://github.com/syncthing/syncthing/tree/master/etc\n\nWindows，Mac，Linux 和安卓手机可以在这里下载有 GUI 界面的程序使用\n\n- https://docs.syncthing.net/users/contrib.html#gui-wrappers\n\n其他方法可以自己决定，我是直接下载安装包命令行启动的\n\n### 在 macOS 上安装\n\n我用的是 macOS，可以直接使用 homebrew 安装启动，并且可以开机自动启动，你也可以到这里 [QSyncthingTray](https://github.com/sieren/QSyncthingTray/releases) 下载 macOS 的 GUI 版\n\n```bash\nbrew install syncthing\n```\n\n启动服务（同时设置开机启动）\n\n```bash\nbrew services start syncthing \n```\n\n停止服务（同时关闭自启）\n\n```bash\nbrew services stop syncthing \n```\n\n手动启动（不会开机自启）\n\n```bash\nsyncthing\n```\n\n启动进程后，可以用浏览器打开 `http://localhost:8384/` 来查看 web 管理页 \n\n### 在 Windows 上安装\n\nWindows 直接在这里 [SyncTrayzor](https://github.com/canton7/SyncTrayzor/releases) 下载软件运行\n\n### 在 Linux VPS 上安装\n\n大多数发行版和不同 CPU 平台的安装包，可以在这里 [Syncthing](https://github.com/syncthing/syncthing/releases) 找到，把它下载到你想要放在的目录然后设置权限，使用命令运行\n\n文章开头有 GUI 版本的链接，不过我要装在没有 GUI 的 VPS 上，所以直接用命令行运行，系统用的是 Debian 9，然后用 supervisor 进程守护来启动的\n\n碰巧前几天之前的一个客户，他的 VPS 做迁移，阿里云送了张代金券，然后客户就送给我了\n\n![aff](https://pic.zhih.me/blog/posts/syncthing-the-best/aff.jpg)\n\n然后续费 9 个月的阿里云学生机，美滋滋😎\n\n虽然带宽比较低，但是对于这种连续同步的备份来说，在第一次备份之后，后面都是增量备份了，除非你都是备份大文件，要不对带宽的要求不是很高，另外 40G 的盘，完全够我备份用了，阿里云最主要就是稳定，很适合做我的备份机\n\n#### 下载 Syncthing\n\n下载最新的包，解压，移动到 `/bin/` 里，改权限\n\n```bash\nwget https://github.com/syncthing/syncthing/releases/download/v0.14.49-rc.1/syncthing-linux-amd64-v0.14.49-rc.1.tar.gz\n\ntar xzvf ./syncthing-linux-amd64-v0.14.49-rc.1.tar.gz\n\nmv ./syncthing-linux-amd64-v0.14.49-rc.1/syncthing /bin/\n\nchmod +x /bin/syncthing\n```\n\n#### 进程守护\n\n安装 supervisor\n\n```bash\napt-get install supervisor\n```\n\n配置守护\n\n```bash\nvi /etc/supervisor/conf.d/syncthing.conf\n```\n\n填入以下内容\n\n```\n[program:syncthing]\ncommand = /bin/syncthing -no-browser -home=\"/root/.config/syncthing\"\ndirectory = /root\nautorestart = True\nuser = root\nenvironment = STNORESTART=\"1\", HOME=\"/root\"\n```\n\n**注意**，我例子里使用的是 root 用户，所以响应的目录是 `/root`，你要是使用其他用户，应该是 `/home/用户名`，就是你登录时默认所在的目录\n\n现在就可以使用 `supervisorctl` 命令来管理进程了\n\n- 启动\n\n```bash\nsupervisorctl start syncthing\n```\n\n- 重启\n\n```bash\nsupervisorctl restart syncthing\n```\n\n- 停止\n\n```bash\nsupervisorctl stop syncthing\n```\n\n启动进程后，可以用浏览器打开 `http://你的IP:8384/` 来查看 web 管理页 \n\n如果无法打开页面，需要修改 `/.config/syncthing/config.xml` 里的 `127.0.0.1:8384` 字段为 `0.0.0.0:8384`，或者你可以和我一样使用 nginx 做反向代理，前提是你知道怎么做\n\n### 在路由器上安装\n\n目前 [Entware](https://entware.net/) 源里已经有这个包了，但是我发现它是个旧版本，并且有问题，所以这里我选择手动安装\n\n这里的例子是 LEDE x64 但是也适合一切安装了 Entware 的路由器\n\n在这里 [Syncthing](https://github.com/syncthing/syncthing/releases) 下载对应 CPU 平台的安装包，可以用 `uname -m` 查看，我这里是 x86_64 所以选择 amd64\n\n#### 下载 syncthing\n\n下载最新的包，解压，移动到 `/opt/bin/` 里，改权限\n\n```bash\nwget https://github.com/syncthing/syncthing/releases/download/v0.14.49-rc.1/syncthing-linux-amd64-v0.14.49-rc.1.tar.gz\n\ntar xzvf ./syncthing-linux-amd64-v0.14.49-rc.1.tar.gz\n\nmv ./syncthing-linux-amd64-v0.14.49-rc.1/syncthing /opt/bin/\n\nchmod +x /opt/bin/syncthing\n```\n\n#### 添加启动命令\n\n创建并编辑 `/opt/etc/init.d/S92syncthing`\n\n```bash\nvi /opt/etc/init.d/S92syncthing\n```\n\n在里面填上下面所有字段\n\n```bash\n#!/bin/sh\nENABLED=yes\nPROCS=syncthing\nARGS=\"-home=/opt/etc/syncthing\"\nPREARGS=\"\"\nDESC=$PROCS\nPATH=/opt/sbin:/opt/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n\nif [ ! -d /opt/etc/syncthing ]; then\n   /opt/bin/syncthing -generate=\"/opt/etc/syncthing\"\n   sed -i 's|127.0.0.1:8384|0.0.0.0:8384|' /opt/etc/syncthing/config.xml\nelif [[ -f /opt/etc/syncthing/config.xml -a \"127.0.0.1:8384\"==\"127.0.0.1:8384\" ]]; then\n   sed -i 's|127.0.0.1:8384|0.0.0.0:8384|' /opt/etc/syncthing/config.xml\nfi\n\n. /opt/etc/init.d/rc.func\n\n```\n\n然后给权限\n\n```bash\nchmod +x /opt/etc/init.d/S92syncthing\n```\n\n用法: /opt/etc/init.d/S92syncthing (start|stop|restart|check)\n\n启动服务就能在浏览器打开 `路由器IP:8384` 例如 `192.168.1.1:8384` 打开管理页了\n\n## 使用方法\n\n易于使用是 Syncthing 的一个重要特性，打开管理页，一目了然\n\n首次打开管理页，所有平台上都是一样的\n\n![syncthing](https://pic.zhih.me/blog/posts/syncthing-the-best/syncthing.jpg)\n\n然后你需要做的就是\n\n### 设置用户名、密码\n\n![setpass](https://pic.zhih.me/blog/posts/syncthing-the-best/setpass.jpg)\n\n### 设置文件夹\n\n删除默认的同步文件夹，添加新同步文件夹\n\n![addlocal](https://pic.zhih.me/blog/posts/syncthing-the-best/addlocal.jpg)\n\n### 添加远程设备\n\n![addremote](https://pic.zhih.me/blog/posts/syncthing-the-best/addremote.jpg)\n\n然后稍微等一分钟，两边就能连接上了\n\n最终效果\n\n![end](https://pic.zhih.me/blog/posts/syncthing-the-best/end.jpg)\n\n## 结语\n\nSyncthing 作为一款跨平台同步软件，它简单易用、功能完善强大，具有很高的稳定性，很容易让人想出各种使用场景，而且它还是开源的，感谢那上百位贡献者\n\n本文简单介绍了初级使用方法，还未提及其他的诸如版本控制等功能，其他功能应用，如果以后我觉得值得一说，再更新了\n\n>本文章发表于底噪博客 https://zhih.me , 转载请注明\n>直接偷的人，你打球真蔡\n","tags":["macOS"],"categories":["教程"]},{"title":"macOS读写NTFS，及EXT分区格式化和挂载","url":"/macos-mount-ntfs-ext/","content":"\n## 引言\n\n有时候需要在 macOS 读写 NTFS 分区，但是系统默认只能读取不能写入，修改 fstab 和使用 Paragon NTFS 软件都可以实现读写，而我这里使用的是 osxfuse，因为它不仅能支持 NTFS, 还支持 Ext 等其他文件系统\n\n![panes](https://pic.zhih.me/blog/posts/macos-mount-ntfs-ext/panes.jpg)\n\n以下操作需要关闭 SIP，进入恢复模式，在终端里输入 `csrutil disable`，再重启就关闭 SIP 了，黑苹果可以在 clover 里设置\n\n## 安装 osxfuse\n\n`FUSE for OS X` 是用在 macOS 上的第三方文件系统扩展，地址：https://github.com/osxfuse/osxfuse/wiki\n\n使用 [homebrew](https://brew.sh/) 安装\n\n```bash\nbrew cask install osxfuse\n```\n\n![osxfuse.jpg](https://pic.zhih.me/blog/posts/macos-mount-ntfs-ext/osxfuse.jpg)\n\n事实上 FUSE 是提供了提供了接口，要实现 NTFS 和 Ext 文件系统的支持，还需要安装模块\n\n## 读写 NTFS 分区\n\n让 macOS 读写 NTFS 需要安装 ntfs-3g\n\n```bash\nbrew install ntfs-3g\n```\n\n### 手动挂载\n\n使用 `diskutil list` 查看分区，例如我的 U 盘是 `disk4s1`\n\n那么可以用以下命令挂载\n\n```bash\nmkdir ~/Desktop/UDISK\nsudo ntfs-3g /dev/disk4s1 ~/Desktop/UDISK -o allow_other\n```\n\n这样 U 盘就被挂载到桌面了\n\n卸载这个分区的命令式是 `sudo umount /dev/disk4s1`\n\n**注意：**不管是用什么方式挂载 NTFS 分区，都不建议挂载 win 的系统盘，有翻车嫌疑，所以当 ntfs-3g 发现你挂载的分区有 win 休眠和快速启动遗留的缓存时，会以只读模式挂载，如果实在需要修改 win 系统分区，需要在 win 里关闭快速启动 \n\n### 自动挂载\n\n我们知道，macOS 开机时会自动挂载 NTFS 分区，但是只能读取\n\n安装 ntfs-3g 后，我们需要让新的 mount_ntfs 替换系统自带的版本，实现写入\n\n为了减少对系统的影响，我们把旧版本备份，并把新版本软链接过去\n\n```bash\nsudo mv /sbin/mount_ntfs /sbin/mount_ntfs.bak\nsudo ln -s /usr/local/sbin/mount_ntfs /sbin/mount_ntfs\n```\n\n重启生效，需要注意的是，每次升级或重装系统之后，需要重新做软链接\n\n现在可以重新打开 SIP，在恢复模式的终端里，输入 `csrutil enable` 再重启，黑果可以在 clover 里设置\n\n## EXT 格式化和挂载\n\next2、ext3、ext4 格式化需要安装 e2fsprogs，挂载需要安装 [fuse-ext2](https://github.com/alperakcan/fuse-ext2)\n\nfuse-ext2 也依赖于 e2fsprogs，所以先装它\n\n```bash\nbrew install e2fsprogs\n```\n\n再安装 fuse-ext2\n\n```bash\nbrew install https://raw.githubusercontent.com/yalp/homebrew-core/fuse-ext2/Formula/fuse-ext2.rb\n```\n\n根据提示，设置面板里的选项需要这样操作才能显示\n\n```bash\nsudo cp -pR /usr/local/opt/fuse-ext2/System/Library/Filesystems/fuse-ext2.fs /Library/Filesystems/\n\nsudo chown -R root:wheel /Library/Filesystems/fuse-ext2.fs\n\nsudo cp -pR /usr/local/opt/fuse-ext2/System/Library/PreferencePanes/fuse-ext2.prefPane /Library/PreferencePanes/\n\nsudo chown -R root:wheel /Library/PreferencePanes/fuse-ext2.prefPane\n```\n\n![ext](https://pic.zhih.me/blog/posts/macos-mount-ntfs-ext/ext.jpg)\n\n这样就装好了\n\n### EXT 分区格式化\n\n前面我们已经安装了 e2fsprogs，现在可以使用它提供的命令来格式化分区\n\n先设置变量让 e2fs 库里的命令暴露出来，将以下字段加在 shell 的配置文件中，我用的是 zsh，所以加在 `~/.zshrc` 里\n\n```\nexport PATH=\"/usr/local/opt/e2fsprogs/bin:$PATH\"\nexport PATH=\"/usr/local/opt/e2fsprogs/sbin:$PATH\"\n```\n\n重启终端或执行 `source ~/.zshrc` 生效\n\n现在就能执行 `mkfs.ext2` `mkfs.ext3` `mkfs.ext4` 等命令了\n\n用法：\n\n```bash\nmkfs.ext4 [-c|-l 文件名] [-b 块大小] [-C 簇大小]\n    [-i 每inode的字节数] [-I inode大小] [-J 日志选项]\n    [-G 弹性组大小] [-N inode数] [-d 根目录]\n    [-m 保留块所占百分比] [-o 创始系统名]\n    [-g 每组的块数] [-L 卷标] [-M 上一次挂载点]\n    [-O 特性[,...]] [-r 文件系统版本] [-E 扩展选项[,...]]\n    [-t 文件系统类型] [-T 用法类型] [-U UUID] [-e 错误行为][-z 撤销文件]\n    [-jnqvDFKSV] 设备 [块数]\n```\n\n使用 `diskutil list` 查看分区，例如我想要格式化为 ext4 的分区是 `disk3s1`\n\n```bash\nsudo mkfs.ext4 /dev/disk3s1\n```\n\n### 挂载 EXT 分区\n\n使用 `diskutil list` 查看分区，例如我有个 Ext4 分区是 `disk3s1`\n\n那么命令是这样的\n\n```bash\nmkdir ~/Desktop/DISK\nsudo mount -t fuse-ext2 /dev/disk3s1 ~/Desktop/DISK\n```\n\n这样就挂载上了\n\n卸载这个分区的命令式是 `sudo umount /dev/disk3s1`\n\n## 结语\n\n平常这些挂载工具用的确实不是很多，但是需要用的时候，又很无奈，所以直接写个笔记记录一下，以后要用的时候方便些\n\n>本文章发表于底噪博客 https://zhih.me , 转载请注明\n>直接偷的人，你打球真蔡\n","tags":["macOS"],"categories":["教程"]},{"title":"WEB是如何工作的","url":"/how-the-web-works/","content":"\n## 引言\n\n本来很犹豫是否要写一下这篇文章的，毕竟自己知之甚少，说些浅的知识还行，一旦深入，就会漏了马脚。但是，另一方面想，既然知道自己懂的不够，就更应该把知道的给梳理出来，也好进行下一步的学习。所以这篇文章也算是对当前所学所知进行一个总结吧，遛😂。\n\n## 简解\n\n先上一个大概的图解\n\n![过程图解](https://pic.zhih.me/blog/posts/how-the-web-works/过程图解.jpg)\n\n上图简单的解释了打开一个网页的过程，稍微详细的解释就是：\n\n1. 浏览器得到网址，并把网址拆解为域名和路径\n    ![URL](https://pic.zhih.me/blog/posts/how-the-web-works/简解url.jpg)\n\n2. 浏览器寻找域名对应的 IP\n    + 先在浏览器自己的缓存里找，如果之前访问过，会有缓存\n    + 如果没有缓存，则让手机或电脑向 DNS 服务器请求获取\n\n3. 浏览器向服务器请求数据\n\n4. 服务器解析请求，得到请求的路径参数等\n    + 如果是静态页面，直接找到对应的静态文件\n    + 如果是动态页面，调用动态语言处理数据合成页面，再交给 HTTP 服务器\n\n5. 服务器把页面发回浏览器\n\n6. 浏览器得到数据，进行解析、渲染、输出\n\n最终就看到了网页。\n\n---\n\n从上面的简解我们可以知道，访问的过程大概可分为：URL，DNS 查询，HTTP，浏览器，这四个部分。\n\n## URL\n\n>URL 是 Uniform Resource Locator 的简写，中文：统一资源定位符，在 web 中很多时候被叫做 ‘网址’。\n\nURL 的标准格式如下：\n\n```\n协议:[//地址[:端口]][/路径]文件[?数据][#锚点]\n\n- 协议： 在 web 中通常使用 http，https\n- 地址： 域名或者 IP 地址\n- 端口： 默认情况下，http 使用 80 端口、https 使用 443 端口的时候，可以省略\n- 路径： 要访问资源所在的目录\n- 文件： 当请求的是具体一个文件时，比如一张图片，需要写清楚，否则由服务器决定返回设置的文件，一般是 `index.html`\n- 数据： ? 后写 GET 请求的参数，每个参数以 & 隔开，再以 = 分开参数名称与数据\n- 锚点： # 后面的数据不会被发送到服务器，它代表网页中的一个位置\n```\n\n**发生了什么**\n\n浏览器获取到用户输入的 URL，就按照以上格式进行解析，如果不符合标准格式，则会判断为用户输入了关键字，并跳转到搜索引擎搜索，当 URL 中存在不是 ASCII 的字符串时，会把字符串转成 [punycode](https://en.wikipedia.org/wiki/Punycode) 标准编码的字符串。\n\n获取到域名后，浏览器首先会在浏览器的缓存中查找与它相关的资源，比如 DNS 缓存、静态资源缓存\n\n浏览器的 DNS 缓存会把之前访问过的域名对应 IP 缓存起来，方便下次使用，一般会保存 TTL(DNS 服务器上缓存时间)、Expires(浏览器记录的到期时间)\n\n**如果没有缓存**，则进行下一步，DNS 查询\n\n## DNS 查询\n\n>DNS 查询就是把网址翻译成 IP 地址。\n\n比方说你的电脑不知道 www.zhih.me 这个域名的 IP 地址，他就会向 DNS 服务器发送个请求，让 DNS 服务器帮他寻找，此时你的电脑就是一个 DNS 客户端，实际上整个具体过程会有不同的情况。\n\n### 域名的结构\n\n想要理解 DNS 查询过程，还得先知道域名的结构。\n\n以 www.zhih.me 这个域名为例，它是个全称域名（FQDN）\n\n当你看到它时，应当从右往左读\n\n![domain1](https://pic.zhih.me/blog/posts/how-the-web-works/domain1.jpg)\n\n而整个域名系统的结构是这样的\n\n![domain2](https://pic.zhih.me/blog/posts/how-the-web-works/domain2.jpg)\n\n根域：储存了负责每个域（如com、cn、me等）的解析的域名服务器的地址信息\n\n顶级域名(TLD)：分为通用、国家、赞助和地理几种类型，用于表示某些组织或用途\n\n二级域名(SLD)：表示组织、个人、特定意义的名称\n\n三级域名：例如：`sina.com.cn`，sina 是一个三级域名，同时又是 `com.cn` 的子域名\n\n子域名：子域名与三级域名不同，例如：`www.zhih.me`，www 是 `zhih.me` 的子域名，但却不是三级域名\n\n### DNS 查询过程\n\n**本地解析**\n\n1. 查看 HOSTS 记录，如果有，直接返回结果\n2. 查看 DNS 缓存，看看它里面是不是有你设置的域名 IP 地址，缓存信息是通过以前的查询获得的，电脑关机时缓存将会被清空\n\n**直接解析**\n\n本地找不到，就向你电脑里设置的 DNS 服务器请求，如果没有设置具体的地址，而是自动获取，就会从 ISP 中获取 DNS 服务器的 IP 地址，我自己使用的是腾讯的 DNS 服务器，我们一般把它叫做本地 DNS 服务器\n\n![dnsquery-1](https://pic.zhih.me/blog/posts/how-the-web-works/dnsquery-1.jpg)\n\n当本地 DNS 服务器找不到结果时，就需要跟其他 DNS 服务器查询获取\n\n**完整解析过程**\n\n![dnsquery-2](https://pic.zhih.me/blog/posts/how-the-web-works/dnsquery-2.jpg)\n\n这个过程可以使用 dig 命令查看\n\n```bash\ndig www.zhih.me +trace\n```\n\n这样，电脑就拿到域名对应的 IP 地址了\n\n## HTTP\n\n关于是什么，在维基百科已经写的很详细了，自己看看吧\n\nhttps://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol\n\n前面我们已经找到了 IP，那么现在我们就要发送请求和接收响应了\n\n### 请求方法\n\n| 方法 | 描述 |\n| ---- | ---- |\n| GET | 请求指定的页面信息，并返回实体主体 |\n| HEAD | 类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头 |\n| POST | 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改 |\n| PUT | 从客户端向服务器传送的数据取代指定的文档的内容 |\n| DELETE | 请求服务器删除指定的页面 |\n| CONNECT | HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器 |\n| OPTIONS | 允许客户端查看服务器的性能。 |\n| TRACE | 回显服务器收到的请求，主要用于测试或诊断 |\n\n### HTTP 状态码\n\n> HTTP状态码（HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码。它由 RFC 2616 规范定义的，并得到RFC 2518、RFC 2817、RFC 2295、RFC 2774、RFC 4918等规范扩展。\n\n应该每个网民都不陌生，或多或少遇到过 404 not fount\n\n状态码有相当多，在这里我就列出他们的分类\n\n| 类型 | 类别 | 描述 |\n| --- | --- | --- |\n| 1xx | 信息 | 请求已被接受，需要继续处理 |\n| 2xx | 成功 | 操作被成功接收并处理 |\n| 3xx | 重定向 | 需要客户端采取进一步的操作才能完成请求 |\n| 4xx | 客户端错误 | 请求的参数错误或无法完成请求 |\n| 5xx | 服务器错误 | 服务器在处理请求的过程中有错误或者异常 |\n\n### HTTP 消息结构\n\n在 shell 中使用 `curl -v` 命令就可以看到请求和响应的消息了\n\n以最常用的 get 请求为例：\n\n```bash\ncurl -v https://mov.zhih.me/weapp/list/1/2\n```\n\n![res_req.jpg](https://pic.zhih.me/blog/posts/how-the-web-works/res_req.jpg)\n\n### HTTP 请求\n\n请求报文的一般包括以下格式：请求行、请求头部、空行和请求数据\n\n```\nGET /weapp/list/1/2 HTTP/2\n//请求行: 请求方法 请求URI HTTP协议/协议版本\nHost: mov.zhih.me\n//服务端的主机名\nuser-agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36\n//浏览器 UA\naccept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\n//客户端能接收的mine\naccept-encoding: gzip, deflate, br\n//是否支持流压缩\n# 空行\n# 请求数据\n```\n\n请求头部就是请求行和空行之间的键值对\n\n### HTTP 响应\n\n响应报文也由四个部分组成，分别是：状态行、消息报头、空行和响应正文\n\n```\nHTTP/2 200\n//状态行：HTTP协议版本号， 状态码， 状态消息\nserver: nginx/1.14.0\n//web 服务器软件名及版本\ndate: Thu, 17 May 2018 14:46:50 GMT\n//发送时间\ncontent-type: application/json; charset=utf-8\n//服务器发送信息的类型\ncontent-length: 589\n//主体内容长度\n# 空行 \n{\"code\":200,\"data\":[{\"rank\":1,\"movid\":1292052,\"rating\":9.6,\"title\":\"肖申克的救赎\",\"genres\":[\"犯罪\",\"剧情\"],\"year\":1994,\"directors\":[\"弗兰克·德拉邦特\"],\"casts\":[\"蒂姆·罗宾斯\",\"摩根·弗里曼\",\"鲍勃·冈顿\"],\"image\":\"https://img3.doubanio.com/view/photo/s_ratio_poster/public/p480747492.jpg\"},{\"rank\":2,\"movid\":1291546,\"rating\":9.5,\"title\":\"霸王别姬\",\"genres\":[\"剧情\",\"爱情\",\"同性\"],\"year\":1993,\"directors\":[\"陈凯歌\"],\"casts\":[\"张国荣\",\"张丰毅\",\"巩俐\"],\"image\":\"https://img3.doubanio.com/view/photo/s_ratio_poster/public/p1910813120.jpg\"}]}% \n//响应正文\n```\n\n## 服务器\n\n前面说了数据怎么发送到服务器，现在说说服务器如何处理收到的数据\n\n当然，这部分的情况相当复杂，不同场景有不同的方案，我这里只简单的举二三的例子\n\n### 静态站点\n\n我的博客 zhih.me 就是个静态站点，通过模板引擎把数据渲染成静态 HTML 文件，这些文件就存在服务器上等待下载，浏览器获取页面就是个文件下载的过程。\n\n1. 浏览器发送 HTTP 请求，请求里包含了文件的路径、主机名等信息\n2. 我的服务器监听了 80 和 443 端口，发现有数据传来，将请求抛给虚拟主机\n3. 虚拟主机发现请求的路径是 '/'，就把网站根目录下的 `index.html` 返回给请求者 \n\n### 动态站点\n\n这里说的动态站点，指页面是由后端处理数据合成的\n\n常见的例子就是 WordPress，WP 应该是现在被使用得最多的 CMS 了，它的处理过程应该是这样的\n\n1. 浏览器发送 HTTP 请求，请求里包含了文件的路径、主机名等信息\n2. 我的服务器监听了 80 和 443 端口，发现有数据传来，发现有数据传来，将请求抛给虚拟主机\n3. 虚拟主机发现请求的路径是 '/'，而 '/' 这个路径已经指定了 PHP 处理，于是把请求抛给了 `index.php` 处理\n4. WP 解析请求里的数据，看看有什么参数，你访问的是首页，也没带什么参数，于是 WP 就从数据库里把首页的文章调出来，然后在 PHP 里遍历合成 HTML 文件，并交给虚拟主机\n5. 虚拟主机把 HTML 页面返回给请求者\n\n### 前后分离站点\n\n前后分离是现在和未来的趋势，大多数 WebApp 都是这种架构，简单说就是使用 AJAX 获取数据在客户端进行渲染。\n\n1. 获取静态资源（静态站点的整个过程），JS 跑起来后开始请求数据\n2. 后端程序获取请求，解析请求数据，从数据库里提取数据，返回数据\n3. 前端程序得到数据，遍历数据，渲染页面\n\n## 浏览器\n\n前面我们就是从浏览器开始的，现在又回到了浏览器，浏览器是个常用且看似简单的软件，但是讲真，原理真的挺复杂的，我这里只能说说解析和渲染相关的一点点皮毛知识，如有错误欢迎斧正。\n\n打开浏览器开发者工具，访问一个网页，我们将看到以下信息\n\n![chrome](https://pic.zhih.me/blog/posts/how-the-web-works/chrome.jpg)\n\n基本过程是这样的：\n\n```\n加载 HTML -> 解析 HTML -> 构建 DOM 树 -> 构建 CSSOM 树 -> 构建渲染树 -> 布局、绘制\n```\n**但是**，现代浏览器为了更快的显示页面，很多任务都是同时进行的，会一边解析 HTML，一边下载外部资源，还一边进行渲染。\n\n### 解析 HTML 并构建 DOM 树\n\n浏览器自上而下的解析 HTML 文档，并在解析的同时构建 DOM（文档对象模型） 树，DOM 树里有各个标签的属性和它们之间的关系\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n    <link href=\"style.css\" rel=\"stylesheet\">\n    <title>Critical Path</title>\n</head>\n<body>\n    <p>Hello <span>web performance</span> students!</p>\n    <div><img src=\"awesome-photo.jpg\"></div>\n</body>\n</html>\n```\n解释器深度遍历 HTML 文档，把  `<html>` `<head>` `<body>` 这些标签按照 W3C 标准，转换成 “定义它属性和规则的对象’”，然后将这些 “对象” 链接在树形结构里，这就是 DOM 树\n\n![dom-tree](https://pic.zhih.me/blog/posts/how-the-web-works/dom-tree.png)\n\n在以上 HTML 结构例子中，`<p>` 和 `<div>` 是兄弟节点，在 DOM 树的构建过程中，当前节点所有的子节点全都构建完成后才会构建下一兄弟节点\n\n### 构建 CSSOM 树\n\n在上面的 HTML 中，`<head>` 里有个外部样式表 `style.css`，HTML 解析到这里时会向服务器请求资源，得到这样的资源：\n\n```\nbody {\n    font-size: 16px\n}\n\np {\n    font-weight: bold \n}\n\nspan {\n    color: red \n}\n\np span {\n    display: none \n}\n\nimg {\n    float: right \n}\n```\n和处理 HTML 类似，浏览器处理 CSS 构建了 CSSOM\n\n![cssom-tree](https://pic.zhih.me/blog/posts/how-the-web-works/cssom-tree.png)\n\n### 构建渲染树\n\n前面已经构建了 DOM 树和 CSSOM 树，现在浏览器就把它们合并成一个渲染树\n\n![render-tree-construction](https://pic.zhih.me/blog/posts/how-the-web-works/render-tree-construction.png)\n\n在渲染树的构建过程中，浏览器遍历 DOM 树，然后对应 CSSOM 树给每个节点设置计算样式（最终样式），设置了 `display: none` 的节点，将会在渲染树中移除\n\n这样，渲染树就包含了页面上所有可见的内容和它们的计算样式\n\n### 布局、绘制\n\n渲染树只包含了内容和样式，要放到浏览器窗口中，还需要计算它们在窗口里的确切的位置和大小，这个过程叫做布局，也称为“自动重排”\n\n浏览器从渲染树的根节点开始遍历，我们可以想象为有外向里的过程，先确定外层的位置大小，在向里层计算\n\n>布局流程的输出是一个“盒模型”，它会精确地捕获每个元素在视口内的确切位置和尺寸：所有相对测量值都转换为屏幕上的绝对像素\n\n布局完成后，浏览器会立即发出“Paint Setup”和“Paint”事件，将渲染树中的每个节点转换成屏幕上的实际像素，这一步通常称为“绘制”或“栅格化”\n\n### 重排和重绘 \n\n当 DOM 或 CSSOM 被修改时，会发生重排（Reflow），也就是把上面的步骤重新来一遍，这样才能确定哪些像素需要在屏幕上进行重新渲染，这个过程也被叫做回流\n\n如果改变的属性与元素的位置大小无关，比如背景颜色，那么浏览器只会重新绘制那个元素，这个过程叫重绘（Repaint）\n\n>重排必然会引起重绘，重绘则不一定会重排\n\n### CSS、JS 阻塞\n\n默认情况下，CSS 是阻塞渲染的资源，浏览器需要等 DOM 和 CSSDOM 都准备好之后才会渲染，注意，这里说的是阻塞渲染，而不是阻塞 DOM 的构建，事实上 DOM 和 CSSDOM 的构建是可以同时进行的\n\n构建 CSSOM 会阻塞它后面 JavaScript 语句的执行，而 JavaScript 语句的执行又会阻止 CSSOM 的构建，原因很简单，因为 JavaScript 执行时可能会改变 CSSOM，同时进行会对性能产生影响 \n\n除非将 JavaScript 显式声明为异步，否则它会阻止构建 DOM，因为默认情况下，浏览器遇到 `<script>` 标签时会直接执行\n\n所以，我们需要尽量把 CSS 放在网页头部，避免太晚才构建 CSSOM，影响渲染；尽量把 JavaScript 放在网页底部，并且设置 async、defer 属性，避免阻塞 DOM 的构建。defer 是“渲染完再执行”，async 是“下载完就执行”，defer 如果有多个脚本，会按照在页面中出现的顺序加载，多个async 脚本不能保证加载顺序。\n\n## 参考\n\nhttps://developers.google.com/web/fundamentals/performance/critical-rendering-path/\n\nhttps://astaxie.gitbooks.io/build-web-application-with-golang/content/zh/03.1.html\n\nhttps://github.com/alex/what-happens-when\n\n## 总结\n\n其实就是个浏览器工作过程的拆析，然后涉及到相当多的知识点，并且这些都是搞 WEB 的必知的，写完这么多也算是消化了，下一步可能写写 WEB 性能优化相关的吧，也是一个很值得写的点\n\n知识就是力量 -- 培根\n\n>本文章发表于底噪博客 https://zhih.me , 转载请注明\n>直接偷的人，你打球真蔡\n","tags":["web"],"categories":["WEB"]},{"title":"做了个电影排行列表小程序","url":"/my-weapp-topmov/","content":"\n## 引言\n\n小程序叫：TOP 电影看不完\n\n![截图](https://pic.zhih.me/blog/posts/my-weapp-topmov/screenshot.jpg)\n\n最近把这个小程序给基本完成了，这个‘完成’，是指最初我设想的功能都实现了。其实半年前就开始着手了，不过断断续续的，后来还回家学车、过年等等，一直没有把它完成。最近又把它捡起来，主要是把后端给完成了。\n\n我爱拿两个东西来做练手的项目🤪🤪，一是天气，二是电影列表。主要原因还是因为有免费的 API，然后是功能明确。\n\n## 设计\n\n### 功能：\n\n* 搜索\n    - 先初步建立 top250 的列表，然后搜索\n    - 搜索内容包括片名、类型、时间、主演、评分、排名\n* 已看\n    - 标记看过的电影，看过就看过了，没有撤销选项😎\n* 收藏\n    - 点击收藏，加入收藏列表\n* 评论\n    - 发表评论\n\n### 前端\n\n* 小程序本身就是 MVVM 架构的\n* 与后端配合登录：wafer2-client-sdk\n* 视图\n    - 豆瓣 top250 列表\n        + 按排名排列列表，显示基本信息\n        + 上拉加载 25 条数据，防止数据过多造成加载缓慢\n    - 搜索\n        + 搜索结果按排名排列，视图同首页\n    - 电影详情\n        + 显示电影详细信息，总看过数、收藏数、评论数\n        + 用户可进行评论\n    - 个人中心\n        + 头像、姓名、等级、看过数、收藏数、评论\n        + 等级数据综合看过电影数据和评论得出\n    - 看过、收藏列表\n        + 同首页视图\n\n前端目录结构\n\n![前端目录结构](https://pic.zhih.me/blog/posts/my-weapp-topmov/app.jpg)\n\n### 后端\n\n* 采用 MVC 架构\n* 采用 nodejs，使用 wafer-node-sdk\n* Web 框架：Koa2\n* 请求体解析：koa-better-body\n* 数据库（电影数据来自豆瓣）：\n    - toplist：top250 部分数据\n        + 电影 id、影名、排名、评分、类型、时间、导演、主演、封面\n    - user：用户信息\n        + openid、session、已看、收藏\n    - mov：电影详情 \n        + 电影 id、详细描述、地区、原名、又名、已看数、收藏数、评论数\n    - comment：评论\n        + 电影 id、openid、评论内容、评论时间、片名\n\n后端目录结构\n\n![后端目录结构](https://pic.zhih.me/blog/posts/my-weapp-topmov/server.jpg)\n\n### 技术栈\n\nHTML\nCSS\nJavaScript\nNode.js\nMySQL\nNginx\n\n## 动手做\n\n### 本地部署\n\n本地搭一个 https 服务器，因为小程序只支持 https，在微信公众平台设置域名等基础设置。\n\n注意，要想扫码调试、预览，需要在路由器设置 hosts，把域名指向电脑的 IP。\n\n### 敲代码\n\n其实就是正常的 web 编程，小程序就是一个和 vue 很像的框架，数据是双向绑定的。因为接触过 vue 所以上手很简单。想想之前从节点驱动跳出，初次接触数据驱动，让我感觉很新奇也很爽。\n\n首先是，微信开发者工具，之前第一次用的时候，真他妈难用，现在更新越来越好了，不过编辑器还是同样垃圾，敲代码还得用 VS code 或其他熟悉的编辑器，我用的是 sublime 因为各种插件啥的我都装好了，快捷键什么的都调的很舒服。开发者工具就拿来做调试吧。\n\n顺便提一下，因为开发者工具里用的是 chrome 做调试工具，如果后端使用的是 nodejs，可以使用 node --inspect，配合调试。\n\n然后，讲真，开发真的没什么可说的，官方的开发文档很详细，API 都很丰富，做一个电影列表没什么难度。\n\n后端方面简单说一下，因为豆瓣的 API 有请求数限制，所以我冒昧的使用了自己的 VPS 做中转，做数据缓存。\n\n另外，实现登录功能和登录态储存，使用的是 wafer-node-sdk，这个需要仔细看官方的说明。\n\n## 发布\n\n1. 开发者工具点击上传\n2. 微信公众平台提交审核\n3. 等个一两天就能审核完成\n\n注意，有些功能在个人认真的小程序是不能被审核通过的，比如我这里边的评论，我是通过先关闭评论功能，通过审核后再远程打开的😎，机智如我。\n\n## 结语\n\n本来还打算写点什么的，后来发现，没啥可写，终究是肚子里墨水不够，技术积累还不行，得加油啊。\n\n>本文章发表于底噪博客 https://zhih.me , 转载请注明\n>直接偷的人，你打球真蔡\n\n\n\n\n\n","tags":["小程序","全栈"],"categories":["WEB"]},{"title":"Nginx配置HTTPS以及使用HTTP2服务器推送","url":"/nginx-http2-https/","content":"\n## 引言\n\n我的小博客在SSL Labs 的 [SSL Server Test](https://www.ssllabs.com/ssltest/index.html) 中得到了 A+ 的好成绩\n\n![SSL Server Test](https://pic.zhih.me/blog/posts/nginx-http2-https/cover.jpg)\n\n虽然没搭建过什么大站，但是这几年也积累了不少经验，今天就说说在 Nginx 上配置 HTTPS、HTTP/2，并开启服务器推送。\n\n很多人说做产品要追求用户体验，作为一个用户，我认为一个网站最重要的就是打开的速度。所以在自己搭网站的时候，一直痴心于提高网站的速度。\n\n以我这个博客为例，自己移植并改写了主题，资源都进行了压缩，公共静态资源都用了公共 CDN，因为 VPS 的带宽只有可怜的 1M，所以图片资源都进行了压缩并存到了腾讯云 COS，使用 CDN 进行加速。这样的一堆加成之后，即使 VPS 每秒只能跑 128kb 的资源，也能快速的打开网站。\n\n## 优化什么\n\nweb 性能优化的门路很多，有空我再另开一篇我对优化的见解说说，但是一般对于我博客这种静态站来说，真正影响速度的是，带宽、延迟、请求数、资源大小。带宽大、延迟低的 vps 贵，为减少服务器相关的开销，只能靠压缩资源和减少请求了。\n\n网速慢的时候下载大文件特别操蛋，这大家都知道，那打开网页亦是如此，但速度不仅取决于客户端的网速，还有服务端的。既然搞不来网速快的服务器，那只能把文件减小咯，把什么 JS、CSS、图片都给压缩咯，这下总可以了吧。\n\n**但是，压缩就足够了吗？**\n\n不够，因为浏览器有个并发连接数限制，也就是说，浏览器对每个域名的并发请求是有限的，同一时间只能做几个请求，然后再等下一轮请求。具体到实际体验就是，当你的一个网页内需要加载的资源数量较多的时候，浏览器分几次才能把资源下载下来，这就影响到网页加载速度了。\n\n**所以，该怎么办？**\n\n减少请求数呗，很多时候都这样说，但是一般来说，减少请求数意味着对各种资源最内联处理，而缺点很明显，内联 CSS/JS 不好维护、内联图片不会有浏览器缓存、增大单个网页的体积，当然这些也不是绝对，至少以我这个静态博客来说，都是弊端。\n\n**艹，一不小心都偏离重点了**\n\n好吧，开始说说主题吧。\n\n## HTTP2.0\n\n关于是什么，干什么的，怎么来的，这些问题，自己去看[维基百科](https://zh.wikipedia.org/wiki/HTTP/2)去，还有这一篇谷歌高性能 web 工程师写的文章：https://hpbn.co/http2\n\n我这里就简单说一下\n\n一句话说就是，**解决了上面遗留下来问题**\n\n对于我们来说，提升体验的是它的这 3 个特性\n\n- 头压缩\n    + 压缩请求头大小，减少请求时间\n\n- 请求和响应复用\n    + 并行交错多个请求，不会阻塞任何请求\n    + 并行传输多个响应，而不会对任何一个进行阻塞\n    + 使用单个连接并行传送多个请求和响应\n    + 消除不必要的延迟并提高可用带宽的利用率\n\n![请求和响应复用](https://pic.zhih.me/blog/posts/nginx-http2-https/multiplexing.jpg)\n\n- 服务器推送\n    + 除了对原始请求的响应之外，服务器还可以 向客户端推送额外的资源\n\n![服务器推送](https://pic.zhih.me/blog/posts/nginx-http2-https/server-push.jpg)\n\n*以上图片来自https://hpbn.co/http2*\n\n如果把浏览器和服务器通信比作你和朋友聊天，那么在这个场景下，会是这样的\n\n- HTTP1.1（目前主流协议）\n    + 你发一句消息给朋友，需要等朋友回复你了才能发第二句\n    + 你不主动问候朋友，朋友不会理你\n\n- HTTP2.0 \n    + 你可以一次发多条消息了，朋友也会一次性回复你\n    + 你的朋友会主动问候你\n\n是不是美滋滋\n\n## 配置 HTTPS\n\n我的新文章，更详细的 HTTPS 配置，可以到这里查看\n\nhttps://zhih.me/make-your-website-support-tls1-3/\n\n本来这篇文章就是要写写，如何配置 HTTPS 的，想不到扯出这么多\n\n关于为什么要配置 HTTPS，问你自己吧\n\n### 申请 SSL 证书\n\n随着 HTTPS 的普及，出现了很多的免费证书，比如 Let’s Encrypt，但我打算之后再写一篇文章详细写写。\n\n或者更方便的是到阿里云、腾讯云的后台申请免费的证书，也很简单。\n\n### 安装 Nginx\n\n版本装最新的就好，如果服务器自带的源不够新，可以用 Nginx 的官方源，具体使用方式在他们的官网已经给出，不在详细说明。\n\nhttp://nginx.org/en/linux_packages.html\n\n### 安装 OpenSSL\n\n开启 HTTPS 需要 OpenSSL 版本 >= 1.0.1，我用的 Debian9 自带 1.1.0\n\n你可以使用 `openssl version` 这个命令查看，不够新的自行升级\n\n### Nginx 配置\n\n#### HTTP 301 跳转 HTTPS\n\n大多浏览器默认访问 HTTP，所以我们需要让它跳转到 HTTPS 上\n\n以我的博客为例\n\n```\nserver {\n    listen      80;\n    server_name zhih.me www.zhih.me;\n    return 301 https://zhih.me$request_uri;\n}\n```\n\n### HTTP2 和 HTTPS\n\n目前所有支持 HTTP/2 的浏览器都是基于 TLS 1.2 协议之上构建 HTTP/2 的，所以要使用 HTTP/2 必须开启 HTTPS\n\n以下是我博客服务器 HTTPS 部分的完整配置，gzip 压缩等其他设置我放到了 nginx.conf 里\n\n我的配置可能会更新，可以去 [编译Nginx支持TLS1.3](https://zhih.me/make-your-website-support-tls1-3/) 那篇帖子里看，一切以那里的为最新\n\n```\nserver {\n    listen 443 ssl http2;\n    server_name zhih.me www.zhih.me;\n\n    if ($host != zhih.me) {\n        return 301 https://zhih.me$request_uri;\n    }\n    root  /站点目录;\n\n    ssl_certificate       /ssl/zhih.me.crt;\n    ssl_certificate_key   /ssl/zhih.me.key;\n\n    ssl_protocols TLSv1.2;\n    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';\n    ssl_prefer_server_ciphers on;\n\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_timeout 1d;\n    ssl_session_tickets on;\n    \n    ssl_stapling on;\n    ssl_stapling_verify on;\n    \n    resolver 119.29.29.29 8.8.8.8 valid=300s;\n    resolver_timeout 10s;\n\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\";\n\n    location / {\n        index  index.html;\n        http2_push /css/allinone.min.css;\n    }\n}\n```\n\n### 详细说明\n\n#### 开启 HTTP2\n\n```\nlisten 443 ssl http2;\n```\n\n监听 443 端口，HTTPS 协议走这个端口，HTTP 走的是 80\n\n只需要在 SSL 后面加上就能开启 HTTP2 \n\n>注意：我这配置里边的 301 跳转是从 www.zhih.me 跳转到 zhih.me，如果你不需要，可以不像这样设置\n\n#### 开启服务器推送\n\n```\nlocation / {\n        index  index.html;\n        http2_push /css/allinone.min.css;\n    }\n```\n\n我这里把 `/css` 目录下的 `allinone.min.css` 文件添加了服务器推送\n\n之后在浏览器开发者控制台里的效果就是这样的\n\n![服务器推送](https://pic.zhih.me/blog/posts/nginx-http2-https/push.jpg)\n\n#### 其他配置\n\n`ssl_certificate` 是公钥，`ssl_certificate_key` 是私钥，后面写文件路径\n\n`ssl_protocols` 加密协议，Nginx 默认是 SSLv3 TLSv1 TLSv1.1 TLSv1.2，但是 SSLv3 目前还存在漏洞，不建议使用，而我做的比较激进，只保留了 TLSv1.2，因为我相信，能访问这个博客的人，用的浏览器都不会很低级。\n\n`ssl_ciphers` 加密算法，因为不同浏览器优先使用的算法不同，我们可以在服务端设置优先级和禁止使用的算法，并结合 `ssl_prefer_server_ciphers on` 来让浏览器优先选择我们设置好的。\n\n`ssl_session_cache` SSL 会话缓存\n\n`ssl_session_timeout` SSL 会话缓存过期时间\n\n`add_header Strict-Transport-Security max-age=15768000` 开启 HSTS，后面是缓存时间\n\n#### 重启 Nginx\n\n保存配置，重启 Nginx 生效\n\n```bash\nnginx -s reload\n```\n\n#### 查看效果\n\nHTTPS 生效结果查看很简单，直接打开你的网站，看到浏览器前面有个锁头就行了\n\n我们主要看 HTTP2 是否生效，使用 curl 命令，curl 需要支持 HTTPS HTTP2\n\n```bash\ncurl --http2 -I https://zhih.me\n```\n\n![效果](https://pic.zhih.me/blog/posts/nginx-http2-https/end.jpg)\n\n教程写到这里就告一段落了，你可能就要问了，HTTP/2 加速了你的博客了吗？\n\n一定程度上是的，但由于我用了 CDN，在自己服务器上请求的资源并不会很明显，博客上只有一个自定义样式表和基础的静态网页需要从我自己服务器上获取，其他的各种类库我都使用了 CDN，文章里的图片放到了腾讯云 COS 搭配 CDN 使用\n\n每次有人访问时，请求了静态页面，HTTP2 的服务器推送会把自定义样式表推送过去，就减少了一次请求，用的 CDN 也启用了 HTTP2，所以可以在我这 1Mbps 小水管上实现 0.9s 打开 13 个请求、近 500kb 大小的页面\n\n![博客速度测试](https://pic.zhih.me/blog/posts/nginx-http2-https/blogspeed.jpg)\n\n## 其他工具\n\nMoz 推荐的 HTTPS 配置（自动配置）：https://mozilla.github.io/server-side-tls/ssl-config-generator/\n\nSSL Server Test：https://www.ssllabs.com/ssltest/index.html\n\n不服跑个分\n\n## 结语\n\n技术的升级迭代潜移默化的影响着大家的生活，从 1960 年 Ted Nelson 构思 HTTP 协议，到 1996 年 HTTP/1.0 被正式作为标准，再到 1997 年公布并一直沿用至今的 HTTP/1.1，可以说它是人类互联网的基石，2015 年发布了 HTTP2，它为网页性能而生，他以更快，更强，更安全的特性，逐渐被的被各大公司使用，相信全面普及 HTTPS/HTTP2 不会有太长的时间。\n\n>本文章发表于底噪博客 https://zhih.me , 转载请注明\n>直接偷的人，你打球真蔡\n\n\n\n\n\n","tags":["nginx","https","web"],"categories":["教程"]},{"title":"使用Pyenv 管理PY的版本","url":"/pyenv-usage/","content":"\n## 引言\n\n前几天使用 pip 安装腾讯云 COS 的命令行工具 [coscmd](https://github.com/tencentyun/coscmd) 的时候，macOS 自带的 Python 和 pip 让我觉得不爽。\n\n顺便装一下逼，上面提到的 [coscmd](https://github.com/tencentyun/coscmd) 我提交了几行代码，得到了 merge ，😏😏**我特么也是给腾讯提交过代码的人**😏😏。\n\n首先是 pip ，我直接用 `easy_install` 安装的，在使用它安装 coscmd 时候，需要使用 sudo ，然后各种组件很难想我预想的那样顺利装上，总是需要加 sudo，应该是目录权限的原因。当然，这可能是我的锅，但是对于我来说，使用系统自带的环境是不好的，天知道哪天出错了会影响到什么，我更倾向于包管理器的那种安装方式，出问题就卸载从来。\n\n然后是自带的 Python ，当然我并不是做 PY 开发的，但是接触一下总好，毕竟使用过太多的工具都是用 PY 编的，在之前使用的时候也遇到一些关于版本的问题，我之前还觉得自带了 Python 就美滋滋。然后想用 homebrew 直接自己装算了，但是有发现，这样也不灵活啊，有些时候要 py2.7、有的要 py3 ，那么问题来了，py 有没有和 nvm 一样的版本管理工具？\n\n**废话，必须有的啊！**\n\n这就是 [Pyenv](https://github.com/pyenv/pyenv) 了。\n\n>pyenv lets you easily switch between multiple versions of Python. It's simple, unobtrusive, and follows the UNIX tradition of single-purpose tools that do one thing well.\n\n上面引用他们 github 上的话，翻译过来就是：装，就对了。\n\n## 安装\n\n还是使用 homebrew 安装，关于 homebrew ，去我 [上一篇文章](https://zhih.me/make-macos-better/) 看看。\n\n```bash\nbrew install pyenv\n```\n\n安装好之后，我们还需要在打开 shell 的时候自动执行 pyenv 的初始化\n\n```bash\necho 'eval \"$(pyenv init -)\"' >> ~/.zshrc\n```\n\n重启你的 shell 就生效了\n\n## 使用\n\n我这里只说说基本的使用方法，毕竟我只算是个推荐人，具体的高级用法，找他们的 Wiki 看去\n\n### 安装多个 Python 版本\n\n首先是找到需要装的 Python 版本号\n\n```bash\npyenv install --list\n```\n\n列出一堆各种的版本 Python ，要装哪个就记住版本号\n\n比如说我这里要装个 2.7.14 和 3.6.5\n\n```bash\npyenv install 2.7.14\npyenv install 3.6.5\n```\n\n这样就装上了，你就要问了，这不就和我用 homebrew 安装一样嘛，甚至它安装都调用了 homebrew ？\n\n那下面就是 pyenv 真正起作用的时候了\n\n### 版本管理\n\n实际使用中，我们可能不同的项目需要不同的版本，pyenv 可以给全局切换版本，也可以在给不同的目录设置不同的版本\n\n#### 全局\n\n```bash\npyenv global 3.6.5\npyenv rehash\n```\n\n这下，使用 `python -V` 就能看到自己版本变成了 3.6.5\n\n#### 当前目录\n\n要给项目单独设置 Python 版本，需要 cd 进入目录\n\n例如我要给当前目录设置为 miniconda3-4.3.30\n\n```bash\npyenv local miniconda3-4.3.30\npyenv rehash\n```\n\n这样就可以了\n\n#### 查看环境设置\n\n```bash\npyenv versions\n```\n\n这个命令可以看自己装了哪几个版本，并且哪个目录给了哪个版本，写的清清楚楚\n\n## 结语\n\n人生苦短，我选 Python\n\n>本文章发表于底噪博客 https://zhih.me , 转载请注明\n>直接偷的人，你打球真蔡\n","tags":["macOS","Python"],"categories":["教程"]},{"title":"macOS这样更好用","url":"/make-macos-better/","content":"\n## 引言\n\n我之所以选择使用 macOS，是因为它是简洁高效的类 Unix 系统，对各种开发环境友好，并且近年来随着国内 Mac 的普及，各种应用软件也在 macOS 上适配了，软件丰富度方面完全不用担心，并且 macOS 下的软件更加的纯净简洁，不会像 Windows 下那样出现 “全家桶” 效应。\n\n俗话说得好：工欲善其事，必先利其器\n\n那么，刚装上一个新的系统，应该怎样去设置，让它更好用呢？\n\n## 0. 软件\n\n我收集了一些免费的 macOS APP，可以去看看，如果你有推荐的，也可以回复我\n\nhttps://zhih.me/hackintosh/#/freeapp\n\n## 1. 系统设置\n\n### dock栏（程序坞）\n\n系统默认的 dock 栏是在底部的，在打开应用时会减少信息流可视面积，所以我们可以设置\n\n- 把它放到屏幕左边\n- 调小图标\n- 设置鼠标放在图标上时变大\n\n这样就可以省出更多的空间，并且按照从左到右的阅读习惯，放在右边比较合适。\n\n![程序坞](https://pic.zhih.me/blog/posts/make-macos-better/程序坞.jpg)\n\n### finder（访达）\n\nfinder 作为一个文件资源管理中心，一些小设置可以让你用的得心应手\n\n- 文件夹\n    - 在用户目录里新建 `home`、`code` 目录\n- 工具栏\n    - 去掉 `排列`，因为可以在文件夹里右键设置排列\n    - 添加 `删除`、`新建文件夹`\n- 显示\n    - 显示路径栏\n    - 显示状态栏\n- 侧边栏\n    - 添加 `home` 目录\n    - 添加 `code` 目录\n\n![访达.png](https://pic.zhih.me/blog/posts/make-macos-better/访达.jpg)\n\n## 2. Xcode\n\nXcode 是 macOS 下重要的 IDE，你要是开发苹果系的原生 App，需要它，而我们更多是需要他的命令行工具\n\n首先，在[App Store](https://itunes.apple.com/cn/app/xcode/id497799835?mt=12)安装Xcode。\n\nXcode 提供了编译软件必备的 `Xcode Command Line Tools`，它包含了 GCC 编译器，在装完 Xcode 之后我们需要执行一下命令安装它\n\n```bash\nxcode-select --install\n```\n\n他会提示安装，按照说明操作就可以了。\n\n## 3. Homebrew\n\n用过 Linux 的都知道包管理器，Debian 系用的 dpkg、红帽系用的 rpm，而 macOS 下最受追捧的就是 [Homebrew](https://brew.sh/) 了，它可以让我们安装和更新应用程序或库，是个大杀器。\n\n### 安装\n\n安装 Homebrew 需要前面提到的 `Xcode Command Line Tools`，之后 Homebrew 所执行的编译包的任务全都依靠它。\n\n在终端输入命令以下回车就能进行安装了\n\n```bash\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n在安装完成后执行以下命令，诊断一下有没有什么错误，或者 Homebrew 需要你做什么样的设置\n\n```bash\nbrew doctor\n```\n\nbrew 就是 Homebrew 的包管理命令了，用法类似 debian 的 apt-get\n\n### 换源\n\nHomebrew 默认的源服务器在国外，这样我们在国内使用的时候速度可能比较慢，阿里云提供了镜像源，我们可以在阿里开源镜像站找到\n\nhttps://opsx.alibaba.com/mirror\n\n找到 homebrew，点击后面的**帮助**可以查看安装和卸载教程\n\n>如果你在使用 homebrew 的时候无法下载程序包，可以尝试换源，一般情况下或者有代理的环境下不建议换源 \n\n### 用法\n\nhomebrew 的用法和其它包管理器一样，如果你使用过，那么这步你可以不看\n\n```bash\n# 安装软件包\nbrew insatll 包名\n\n# 搜索\nbrew search 包名\n\n# 卸载\nbrew uninstall 包名\n\n# 查看已安装列表\nbrew list\n\n# 获取新列表\nbrew update\n\n# 升级软件包\nbrew upgrade\n```\n\n## 4. 快速查看\n\nQuickLook 是 macOS 中相当高效的功能，按一下空格键就可以预览文件，不比打开文件浏览，很方便快捷，它自带的功能可能没有很全，有些文件无法预览，那么就需要给它装上插件。\n\n这里是一些常用的插件： https://github.com/sindresorhus/quick-look-plugins#manually\n\n可以直接使用 homebrew 进行安装\n\n```bash\nbrew cask install qlcolorcode qlstephen qlmarkdown quicklook-json qlimagesize webpquicklook suspicious-package quicklookase qlvideo\n```\n\n## 5. 终端\n\n终端绝对是 macOS 秒杀 Windows 的第一大杀器了，当然，有很多人会推荐使用 iTerm2 之类的第三方终端，就我个人而言，系统自带的就足够，不用再去装那些功能丰富的终端，适合自己的才是第一生产力，学习怎么去用的时间，可以写一个 [onmp](https://zhih.me/onmp-installation/) 了。\n\n### 字体\n\n终端的偏好设置你随便设置，怎么适合怎么来，我在这里只推荐一个必须设置的项，[FiraCode字体](https://github.com/tonsky/FiraCode)，你可以去他们的 github 页看看，相信你一定会爱上它。\n\n### Zsh\n\n它是个令人感到惊艳的 shell，关于它，自行搜索看看吧。\n\n使用 homebrew 安装\n\n```bash\nbrew install zsh\n```\n\n不出意外，现在就安装上了\n\n前面finder设置里新建 `home` 目录的目的是防止每次进终端进行文件下载，或者进行其他操作时，把用户目录搞得一团糟\n\n所以现在还要设置打开终端自动进入 `home` 目录\n\n```bash\nvi ~/.zshrc\n```\n\n在最后添加 `cd ~/home`\n\n### Oh My Zsh\n\n[Oh My Zsh](http://ohmyz.sh) 是 zsh 的一个扩展工具集，提供了丰富的扩展功能，没有他，zsh 将不再完整\n\n#### 安装\n\n```bash\nsh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n\n#### 插件\n\nOh My Zsh 有丰富的插件\n\n内置的可以在这里找到 https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins\n\n说几个我觉得比较好用的\n\n1. [osx](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/osx) 快捷命令\n\n2. [brew](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/brew) 快捷命令\n\n3. [git](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/git)  快捷命令\n\n4. [colored-man-pages](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/colored-man-pages) man 页面上色\n\n5. [colorize](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/colorize) 给输出代码上色\n    \n    要先安装 Pygments\n\n    ```bash\n    pip install pygments\n    ```\n\n    就可以用 `ccat` 命令输出高亮代码\n\n6. [autojump](https://github.com/wting/autojump) 一种更快捷的文件系统导航方式\n    \n    ```bash\n    brew install autojump\n    ```\n\n7. [syntax-highlighting](https://github.com/zsh-users/zsh-syntax-highlighting) 语法高亮\n    \n    ```bash\n    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n    ```\n\n8. [autosuggestions](https://github.com/zsh-users/zsh-autosuggestions) 命令自动提示\n    \n    ```bash\n    git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n    ```\n\n9. [history-substring-search](https://github.com/zsh-users/zsh-history-substring-search) 历史搜索\n\n    输入历史记录中任何命令的任何部分，然后按上下键筛选\n    \n    ```bash\n    git clone https://github.com/zsh-users/zsh-history-substring-search ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-history-substring-search\n    ```\n\n在 zsh 配置文件中的 `plugins` 字段里添加插件\n\n```bash\nvi ~/.zshrc\n```\n\n像这样\n\n```\nplugins=(osx brew git colorize colored-man-pages autojump zsh-syntax-highlighting zsh-autosuggestions)\n```\n\n以上插件按需添加，不想要的删掉括号里的插件名字就行\n\n重启终端，开始玩爽吧\n\n## 6. Git\n\n我不是针对谁，我只想说，不用 git 的程序员都是辣鸡\n\n### 安装\n\n```bash\nbrew install git\n```\n\n安装成功后可以使用 `git --version` 看到git版本号\n\n### 连接 GitHub\n\n[GitHub官方设置教程](https://help.github.com/articles/set-up-git/)\n\n我这里就把它的简化一下\n\ngithub 可以通过 https 和 ssh 连接，我这里推荐使用 https 连接，原因是设置简单、不易被防火墙挡\n\n```bash\ngit config --global user.name \"github用户名\"\ngit config --global user.email \"github注册邮箱\"\n```\n\n这些配置信息会存到 `~/.gitconfig` 里\n\n只是这样设置，每次使用都会提示输入密码，所以要告诉 Git 使用 osxkeychain helper 全局 credential.helper 配置\n\n```bash\ngit config --global credential.helper osxkeychain \n```\n\n下一次克隆需要密码的 HTTPS URL 时，系统会提示您输入用户名和密码，并授予访问 OSX 钥匙串的权限。完成此操作后，用户名和密码将存储在您的钥匙串中，并且不需要再次将它们输入到 Git 中。\n\n至此，大功告成\n\n## 7. 结语\n\nmacOS 作为一个对开发者友好的系统，还有很对技巧等着大家发掘，并且每个人的习惯都是不同的，而 macOS 也容纳了大家的不同，提供了大家个性化设置的基础，相信在你的调教下，它会成为你手中的大杀器。\n\n>本文章发表于底噪博客 https://zhih.me , 转载请注明\n>直接偷的人，你打球真蔡\n\n\n\n\n\n\n\n\n\n","tags":["macOS"],"categories":["心得"]},{"title":"一键开启macOS HiDPI","url":"/one-key-hidpi/","content":"\n## 引言\n\n作为一个黑苹果用户，追求黑果的体验是当然的，当各个硬件都驱动完善后，要做的就是细节的优化了，毕竟装上是拿来用的，可不能因为体验差苦了自己啊😂。机器毕竟便宜，从第一视觉上最重要的就是屏幕了，当然自带的屏幕素质没法改变，除非换屏了，然而换屏又违背了省钱的初衷，于是只能通过 UI 上的改变来提升体验了。\n\n## 说明\n\n项目地址：https://github.com/xzhih/one-key-hidpi\n\n 此脚本的目的是为中低分辨率的屏幕开启 HiDPI 选项，并且具有原生的 HiDPI 设置，不需要 RDM 软件即可在系统显示器设置中设置\n\nmacOS 的 dpi 机制和 win 下不一样，比如 1080p 的屏幕在 win 下有 125%、150% 这样的缩放选项，而同样的屏幕在 macOS 下，缩放选项里只是单纯的调节分辨率，这就使得在默认分辨率下字体和 UI 看起来很小，降低分辨率又显得模糊。\n\n同时，此脚本也可以通过注入修补后的 EDID 修复闪屏，或者睡眠唤醒后的闪屏问题，当然这个修复因人而异\n\n开机的第二阶段 logo 总是会稍微放大，因为分辨率是仿冒的\n\n设置：\n\n![HiDPI效果.png](https://pic.zhih.me/blog/posts/one-key-hidpi/hidpi-setting.jpg)\n\n![HiDPI设置](https://pic.zhih.me/blog/posts/one-key-hidpi/hidpi.gif)\n\n## 使用方法\n\n在终端输入以下命令回车即可\n\n```bash\nbash -c \"$(curl -fsSL https://raw.githubusercontent.com/xzhih/one-key-hidpi/master/hidpi.sh)\"\n```\n\n![运行](https://pic.zhih.me/blog/posts/one-key-hidpi/run.jpg)\n\n## 恢复\n\n### 命令恢复\n\n如果还能进系统，就再次运行命令选择选项 3 关闭 HIDPI。\n\n### 恢复模式\n\n如果使用此脚本后，开机无法进入系统，请到 macos 恢复模式中或使用 clover `-x` 安全模式进入系统，打开终端\n\n这里有两种方式进行关闭，建议选第一种\n\n1. 快捷恢复\n    \n```bash\nls /Volumes/\ncd /Volumes/你的系统盘/System/Library/Displays/Contents/Resources/Overrides/HIDPI\n\n./disable\n```\n\n2. 手动恢复\n\n使用终端删除 `/System/Library/Displays/Contents/Resources/Overrides` 下删除显示器 VendorID 对应的文件夹，并把 `HIDPI/backup` 文件夹中的备份复制出来。\n\n请使用单个显示器执行以下命令，笔记本关闭外接显示器的 HIDPI 时请关闭内置显示器\n\n具体命令如下：\n\n```bash\nls /Volumes/\ncd /Volumes/你的系统盘/System/Library/Displays/Contents/Resources/Overrides\nEDID=($(ioreg -lw0 | grep -i \"IODisplayEDID\" | sed -e \"/[^<]*</s///\" -e \"s/\\>//\"))\nVid=($(echo $EDID | cut -c18-20))\nrm -rf ./DisplayVendorID-$Vid\ncp -r ./HIDPI/backup/* ./\n```\n\n>本文章发表于底噪博客 https://zhih.me , 转载请注明\n>直接偷的人，你打球真蔡\n\n","tags":["macOS","shell"],"categories":["教程"]},{"title":"黑苹果安装教程","url":"/hackintosh-install-guide/","content":"\n## 引言\n\n在燃7000 的群里发现还有很多小伙伴进群，挺震惊的，毕竟这本子这么久了还能保持一定的热度，但是群里的教程比较老旧，很多内容已经不适合现在的新系统，于是就有了这个教程。\n\n黑果安装的教程大同小异，就是各个机型的配置不一样，从而导致EFI不一样，理论上讲，配置和燃7000相同或相近的机器都能按照这个教程安装好。\n\n>其他机型的小伙伴可以到我的黑苹果合集里找找，可能会有合适你的 EFI \n>https://zhih.me/hackintosh/\n\n## 视频版\n\nB站：https://www.bilibili.com/video/av21503652\n\nYouTube：https://youtu.be/IZCF3E_oQB8\n\n## 1. 准备\n\n至少 8G 容量的U盘\n\n分区精灵 http://www.diskgenius.cn\n\n黑果小兵的 [macOS 镜像](https://zhih.me/hackintosh/#/OS-images)\n\n镜像写入工具：[Etcher](https://www.balena.io/etcher/)\n\n~~transmac 链接: https://pan.baidu.com/s/15QmZZLtRU1ZwMi7uCYKC-g 密码: 8dpe~~\n\n## 2. 分配硬盘ESP分区\n\n硬盘分区表类型必须为 GUID，ESP 分区必须大于 200M，我建议给个 220M\n\n![ESP分区](https://pic.zhih.me/blog/posts/hackintosh-install-guide/ESP分区.jpg)\n\n分出你想要装 macOS 的分区，大小你自己定，格式随便，因为安装时要抹盘\n\n## 3. 写入镜像\n\n写入镜像现在可以使用更好的工具 [Etcher](https://www.balena.io/etcher/)，当然 transmac 也是可以用的\n\n### 第一种方法 Etcher\n\n1. 安装后打开 Etcher\n2. 选择镜像\n3. 选择 U 盘\n4. 等待写入完成\n\n**这样就可以了**，是不是很简单\n\n### 第二种方法 transmac \n\n**格式化**\n\n以管理员身份运行 transmac，<kbd>右键</kbd>点击你的U盘，选择 `Format Disk for Mac`，全选择确认然后等它格式化完，win10 可能会提示要想使用U盘必须对其格式化，点取消。\n\n![格式化](https://pic.zhih.me/blog/posts/hackintosh-install-guide/格式化.jpg)\n\n**写入**\n\n再次<kbd>右键</kbd>点击 U 盘，选择 `Restore with Disk Image`，选择镜像点击 OK，静静等待写入完成\n\n![写入镜像](https://pic.zhih.me/blog/posts/hackintosh-install-guide/写入镜像.jpg)\n\n写入完成，win 可能还会提示一些格式化之类的，不用理会\n\n## 4. 其他设置\n\n### BIOS 设置\n\n重启进入 BIOS，设置硬盘 AHCI、关闭安全启动，保存退出\n\n![BIOS设置](https://pic.zhih.me/blog/posts/hackintosh-install-guide/BIOS设置1.jpg)\n\n![BIOS设置](https://pic.zhih.me/blog/posts/hackintosh-install-guide/BIOS设置2.jpg)\n\n### U盘启动\n\n再次重启，进入启动项选择（ dell 是在显示 logo 时按 <kbd>F12</kbd>）\n\n选择你的U盘\n\n![U盘启动](https://pic.zhih.me/blog/posts/hackintosh-install-guide/U盘启动1.jpg)\n\n如果你的没显示，可以在 BIOS 里添加\n\n![U盘启动](https://pic.zhih.me/blog/posts/hackintosh-install-guide/U盘启动2.jpg)\n\n## 5. 安装\n\n在 clover 设置里选择 config 为 `config_HD615_620_630_640_650.plist`\n\n![clover启动设置](https://pic.zhih.me/blog/posts/hackintosh-install-guide/clover启动设置.jpg)\n\n返回选择 macOS 安装引导项\n\n### 抹盘\n\n以上不出意外，就能看到 macOS 的恢复模式了\n\n进入磁盘工具\n\n选择你要安装到的分区，点击抹掉，选择格式为 `macOS扩展（日志式）`，抹掉\n\n![抹盘](https://pic.zhih.me/blog/posts/hackintosh-install-guide/抹盘.jpg)\n\n抹盘出现错误的，一般是分区所在硬盘的 ESP 分区不足 200M 导致的\n\n### 安装 macOS\n\n退出磁盘工具，选择安装 macOS\n\n之后就能正常安装了，具体的我就不上图了，想看过程就去看视频版的吧\n\n安装会有 3 个阶段\n\n- 第一阶段，程序把文件写入硬盘，然后会自动重启，选择U盘引导进入 clover，再次设置 config，退出选择新出现的引导项\n\n- 第二阶段，程序继续进行系统安装，完成后会自动重启，同样需要选择U盘引导和 config 设置\n\n- 第三阶段，系统安装完成，进行一些自定义设置，进入系统\n\n## 6. 更换EFI，实现硬盘引导和其他驱动\n\n安装好系统后，一些硬件是没有驱动的，这是就需要用替换 EFI 了，而且之前的 EFI 是镜像自带的，并且在U盘里，现在我们要用硬盘引导\n\n### 工具\n\n下载 [Clover Configurator](https://mackie100projects.altervista.org/download-clover-configurator/)\n\n![Clover Configurator](https://pic.zhih.me/blog/posts/hackintosh-install-guide/下载CloverConfigurator.jpg)\n\n下载 [冰水的EFI](https://zhih.me/dell-7460-7560-hackintosh)\n\n![冰水的EFI](https://pic.zhih.me/blog/posts/hackintosh-install-guide/冰水的EFI.jpg)\n\n### 替换\n\n打开 Clover Configurator，点击 `Mount EFI` ，挂载安装磁盘上 ESP 分区\n\n打开分区，把你的机型所对应的 EFI 文件夹扔到分区里\n\n![替换](https://pic.zhih.me/blog/posts/hackintosh-install-guide/替换.jpg)\n\n可以拔掉U盘重启了\n\n## 7. 后续\n\n启动默认进 win 的，可以在 BIOS 里设置 clover 启动项为第一位\n\n亮度无法调节的，可以使用 kext utility 重建缓存，重启生效\n\n字体太小？可以使用我的 HIDPI 脚本开启缩放\n\n>本文章发表于底噪博客 https://zhih.me , 转载请注明\n>直接偷的人，你打球真蔡\n","tags":["hackintosh","macOS"],"categories":["教程"]},{"title":"我是如何在128M内存的vps上安装lnmp的","url":"/lnmp-on-128m-ram-vps/","content":"\n## 引言\n\n封面那张图和这篇文章无关😂，那是之前在学校的时候拍的，一台 64M 古董大脑壳装 win me，然后玩三维弹球🤪 2333\n\n![三维弹球](https://pic.zhih.me/blog/posts/lnmp-on-128m-ram-vps/winme.jpg)\n\n作为一个整天折腾 VPS 的博主，手里少不了各种便宜的低配小鸡，今天我要祭出我那经常被 BAN 😒的 128M 内存小鸡，为大家写一篇小内存 VPS 安装 lnmp 的教程，并且，我要让它把 WordPress 跑起来。\n\n先上配置：\nCPU：Intel(R) Xeon(R) CPU X5560 @ 2.80GHz 单核\n内存：128M\n硬盘：2GB\n系统：debian-8.0-x86_64\n虚拟化：openVZ\n\n可以说这小鸡是相当极限了，当然我还有一台传家宝 64M 内存的，但是在上面装 lnmp 遇到了一些麻烦，就放弃了😂\n\n## 一、软件源\n\n由于配置太低，lnmp 所需的 Nginx MySQL PHP 要是用编译的方式安装，在过程中基本就宕机了，所以这里才用的是 apt 的方式进行安装。\n\n在执行以下操作前，建议先运行一下命令，更新和安装一些包，以防出错\n\n```bash\napt-get update && apt-get upgrade\napt-get install curl wget\n```\n\n### 1. 添加软件源\n\n系统是 debian8，自带源内没有 PHP7，所以添加一个 [dotdeb](http://www.dotdeb.org) 源，它里面有 debian7、debian8 的各种软件包，同时他们也提供世界各地的[镜像](https://www.dotdeb.org/mirrors/)。\n\n```bash\nvi /etc/apt/sources.list\n# 在 sources.list 里添加两行 (deb 和 deb-src)\n```\n\n我的 vps 在美帝，所以添加了他们的美国镜像\n\n```\ndeb http://mirrors.asnet.am/dotdeb/ jessie all\ndeb-src http://mirrors.asnet.am/dotdeb/ jessie all\n```\n\n如果你直接从官网复制过来，或者是你的系统是 debian7，记得修改网址后面的版本名。\n\n### 2. 安装 GnuPG 密匙\n\nGPG主要是实现官方发布的包的签名。\n\n```\nwget https://www.dotdeb.org/dotdeb.gpg\nsudo apt-key add dotdeb.gpg\n```\n\n### 3. 源添加完毕\n\n运行 `apt-get update && apt-get upgrade`，现在你应该能从 dotdeb 上获取软件了。\n\n## 二、软件包\n\n### 1. Nginx\n\n```bash\napt-get install nginx -y\n```\n\n打开浏览器，输入你的 IP，能显示 `Welcome to nginx!`，就说明安装成功了。\n\n### 2. PHP7\n\n```bash\napt-get install php7.0 php7.0-cgi php7.0-cli php7.0-fpm php7.0-mysql php7.0-odbc php7.0-opcache -y\n```\n\n以上我只安装了几个 module，如有需要，自己安装其他的。\n\n安装成功后，运行 `php -v` 可以看到 PHP 的版本信息。\n\n### 3. MySQL\n\n```bash\napt-get install mysql-client mysql-server -y\n```\n\n输入命令后，会进行安装，过程中会有输入密码的提示框，按提示操作即可。\n\n运行 `mysql -u root -p`，输入密码，能进入 MySQL 就说明装上了。\n\n## 三、安装 WordPress\n\n至此 lnmp 已经安装完毕了，我们先看看相关的管理命令再安装 WordPress。\n\n```bash\n# 启动|停止|重启\n/etc/init.d/nginx start|stop|restart\n/etc/init.d/php7.0-fpm start|stop|restart\n/etc/init.d/mysql start|stop|restart\n```\n\n好了，咱们开始安装 WordPress \n\n这部分我就不多说了，配置教程之类的很多，WP官网的安装文档也相当清晰。\n\n其实就是以下步骤：\n\n1. 创建 Nginx 配置文件\n2. 在 MySQL 里创建数据库\n3. 下载、解压 WordPress 程序包\n4. 进入网页安装\n\n跑得动没啥，就是看看这小鸡的承载能力，我这里使用 ab 命令对首页进行压力测试，并且首页也就一篇文章列表，情况如下图：\n\n![压力测试](https://pic.zhih.me/blog/posts/lnmp-on-128m-ram-vps/压力测试.jpg)\n\n在做100个并发，访问10000次的测试中，在进行到第7143个请求的时候，小鸡爆了，完全无法访问，过了一会才恢复过来，看来对它的要求不能太高啊😂。\n\n当然，使用WP也要使用静态化插件才能提高承载能力，我就懒得试了\n\n## 最后\n\n其实这篇文章就是给小鸡跑个 lnmp，给它点压力，我过过手瘾，也证实一下 128M 的小内存vps是有能力搭建访问量少的 WP 博客的。\n\n但是，既然内存这么小，何不用 hexo 那种静态博客呢。\n\n这篇文章仅作为新手安装 lnmp 教程，照顾那些低价买了低配置 vps 的同学，祝你们折腾愉快。\n\n如果你想购买 vps，可以看看 [DigitalOcean](https://m.do.co/c/5ddae9064d7f)\n\n这里是我的优惠链接：[https://m.do.co/c/5ddae9064d7f](https://m.do.co/c/5ddae9064d7f)，通过这个链接注册，你可以得到10美元用来购买vps。\n\n>本文章发表于底噪博客 https://zhih.me , 转载请注明\n>直接偷的人，你打球真蔡\n","tags":["Linux","lnmp"],"categories":["教程"]},{"title":"戴尔燃7000黑苹果EFI","url":"/dell-7460-7560-hackintosh/","content":"\n## 引言\n\n简单说下我的电脑配置：\n\n| 配置 | 详情 |\n| --- | --- |\n| CPU | Intel Core i5-7200U |\n| 显卡 | Intel HD Graphics 620 / Nvidia GeForce 940MX |\n| RAM | 4G + 8G DDR4 2400MHz |\n| 硬盘 | SATA3 500g SSD / M.2 SATA3 128g SSD |\n| 声卡 | Realtek Audio ALC 3246 (ALC256) |\n| 网卡 | BCM94360cs2、DW1830、DW1560 (三张卡我都有) |\n\n在买这台电脑之前就听说过 hackintosh，也就是黑苹果。但是都没有尝试过，因为一般的笔记本黑起来麻烦多多，很难做到“可用”状态，而这台电脑不仅有两个内存插槽、一个 M.2 接口（不支持 nvme）、一个 SATA3 接口，还有一个可更换的网卡，很适合用来黑。\n\n经过一年多的持续更新，已经趋于完美，当做主力系统一点问题都没有。\n\n这是我在经过大量尝试和更新后得出的适用于燃7000的EFI，其他机型，配置相同或者大致相同的同学可以尝试使用。\n\n>其他机型的小伙伴可以到我的黑苹果合集里找找，可能会有合适你的 EFI\n>https://zhih.me/hackintosh/\n\n## 说明\n\n此合集适用于戴尔燃 7000 系列第一第二代型号为 7460/7560/7472/7572 的笔记本电脑\nEFI 可直接用于安装和日常使用\n\n项目地址：[https://github.com/xzhih/dell-7460-7560-hackintosh](https://github.com/xzhih/dell-7460-7560-hackintosh)\n\nSSDT hotpatch 来自[RehabMan](https://github.com/RehabMan/OS-X-Clover-Laptop-Config) \n\n文件列表：\n\n1. EFI (必须)\n2. [HIDPI 已转移到单独的仓库](https://github.com/xzhih/one-key-hidpi) (可选)\n3. 网卡驱动 (可选)\n4. 黑果小兵的 ALCPlugFix (详细说明[来源传送门](https://github.com/daliansky/ALCPlugFix/blob/master/README.md))\n\n## 使用方法\n\n### 1. EFI\n\n安装时（不保证能顺利安装）：使用 transmac 写入镜像至 U 盘后，拷贝 EFI 到 U 盘 ESP 分区中，重启按 <kbd>F12</kbd> 选择 U 盘启动即可开始安装\n\n具体安装教程请看[我的教程](https://zhih.me/hackintosh-install-guide/)\n\n日常使用：安装好系统后，使用 `clover configurator` 挂载 macOS 所在硬盘的 ESP 分区，把 EFI 拷贝进去，重启按 <kbd>F2</kbd> 进入 BIOS 设置此引导为首选，保存重启即可\n\n### 2. 声卡、耳机\n\n声卡驱动都已经有了，只需要进入 `黑果小兵的ALCPlugFix` 这个文件夹，双击 `install...` 运行即可，可以解决唤醒无声、耳机无声、耳机杂音等问题\n\n### 3. 一键开启HIDPI并注入EDID\n\n此一键命令可开启接近原生的 HIDPI 设置，不需要RDM软件即可在系统显示器设置中设置\n\n仓库地址：[一键开启 HIDPI](https://github.com/xzhih/one-key-hidpi)\n\n效果：\n\n![设置.png](https://pic.zhih.me/blog/posts/one-key-hidpi/hidpi-setting.jpg)\n\n### 4. 网卡驱动\n\n机器自带的无线网卡无法驱动，只能购买可驱动的网卡更换，求方便的朋友可以购买 `dw1560/dw1830` 这两款网卡，需要注意的是燃系列有个超燃版也就是没有独显的版本，它因为主板结构不同不能安装 dw1830，另外 dw1830 是 3 天线网卡，在购买时可向商家索要一根 `7~15cm` 的天线，安装时将第三根天线放置在 HDD 下的开槽处防止金属屏蔽信号\n\n文件夹内有两个网卡的驱动，自行将里面的驱动拷贝到 `EFI/clover/kext/other` 中\n\n现在 `1560/1830` 这两张卡基本停产了，所以价格很高，很离谱，没必要买了\n\n白苹果拆机网卡 `bcm94360cs2`，免驱的，不需要放任何驱动，隔空投递和接力（handoff）都能直接使用\n\n### 5. 触摸板手势\n\n触摸板已支持原生手势，自行在系统偏好设置->触控板里打开\n\n## 其他说明\n\nmacOS10.14 中会存在模糊过渡不自然的问题，只需要把 clover 里的 `config-Spoof.plist` 重命名为 `config.plist` 即可解决，原来的`config.plist` 换个你喜欢的名字\n\n每次系统升级或替换新的EFI后，都要打开 `Kext Utility.app` 自动重建缓存，最好还在终端用 `sudo nvram -c` 命令清空一次NVRAM\n\n>本文章发表于底噪博客 https://zhih.me , 转载请注明\n>直接偷的人，你打球真蔡\n","tags":["hackintosh","macOS"],"categories":["教程"]},{"title":"Hexo主题casper使用教程","url":"/hexo-casper-usage/","content":"\n## 简述\n\n这是本人移植自 [Ghost's Casper theme](https://github.com/TryGhost/Casper) 的一个 [Hexo](https://hexo.io) 主题。\n\n项目地址 [https://github.com/xzhih/hexo-theme-casper](https://github.com/xzhih/hexo-theme-casper)\n\nDEMO [https://xzhih.github.io/hexo-theme-casper/](https://xzhih.github.io/hexo-theme-casper/)\n\n## 项目来由\n\n最近搞了个博客，用的是 [Hexo](https://hexo.io) ，发现了很多不错的主题，在寻找主题的过程中发现了另一个博客程序 [Ghost](https://ghost.org) 。它的新版默认主题很和我的胃口，但是在github上搜索一通后，发现只有老版本的被移植到了 hexo，于是想自己动手把它移植过来，看了官方文档后发现hexo的主题还是相当好制作的，用了几天弄好了。当然，功能还不是很完善。\n\n经过几次的修改更新，现在已经比较完善了，大多功能都是主题集成的，不需要再安装插件\n\n下面我就说一下主题的使用方法。\n\n## 特性\n\n- 文章封面图（在首页文章摘要上显示）\n- 文章特色图（在文章详细页面上置顶）\n- 自定义菜单 \n- 自定义 favicon, logo, 头部背景, 作者头像\n- 社交链接 ( 现在支持 github、哔哩哔哩、YouTube、微博、推特、脸书 ) \n- 共三个插件（最新文章、分类、标签云）\n- 内容目录\n- 代码高亮\n- 响应式网页设计\n- 懒加载\n- 主题集成本地搜索\n- Valine 评论系统\n- Baidu 链接提交、Google Analytics\n- Service Worker\n- MacOS、IOS and Android dark mode (Safari、Chrome)\n\n## 安装方法\n\n### 下载\n\n```bash\ngit clone https://github.com/xzhih/hexo-theme-casper.git themes/hexo-casper\n```\n\n### 激活\n\n把hexo配置文件 `_config.yml` 里的 `theme` 字段内容改为 `hexo-casper` 。\n\n### 升级\n\n建议先备份一下在执行下面的操作。\n\n```bash\ncd themes/casper \ngit pull\n```\n\n### 添加统一的文章模板参数\n\n把下面的内容加入到 `scaffolds/post.md`, \n\n```yaml\ncover_img:     # 在文章摘要上显示\nfeature_img:   # 在文章详细页面上置顶\ndescription:   # 文章描述\nkeywords:      # 关键字\n```\n\n### valine 评论系统\n\n使用方法请到他的[官网](https://valine.js.org)查看，并结合下面的配置文件详细添加appID和appKey\n\n**添加关于页面**\n\n```bash\nhexo new page about\n```\n\n## 自定义配置\n\n编辑 `themes/hexo-casper/_config.yml` 设置你想显示出来的特性\n\n```yaml\n# Config\nrss:            # link\nfavicon: https://i.loli.net/2017/11/26/5a19c0b50432e.png\nblog_logo: \nheader_image: https://i.loli.net/2017/11/26/5a19c56faa29f.jpg\nbio: This is a demo\npost_toc: true\n\n# 菜单\nmenu:\n  About: /about\n  Archives: /archives\n  # 其他的可以按照上面的模板添加\n\n# 作者\nauthor_image:   # 链接\nauthor_bio:     # 描述\nauthor_location: # 地址\n\n# 社交链接\nsocial:\n  facebook: https://www.facebook.com\n  twitter: https://www.twitter.com\n  twitter: https://twitter.com\n  facebook: https://facebook\n  telegram:\n  bilibili:\n  youtube:\n  \n# 插件（显示在网站底部）\nwidgets:\n  recent_posts: true\n  category: true\n  tagcloud: true\n  # 这是个简洁的主题，我认为3个就够了\n\n# 文章图片相册（点击图片可以放大）\n# https://github.com/dimsemenov/PhotoSwipe\nlightgallery: true\n\n# 懒加载\n# 首页已经默认开启，其他页面在此开启\n# https://github.com/dinbror/blazy\nlazyload: true\n\n# 搜索功能\nlocal_search: true\n\n# Valine 评论系统\n# https://valine.js.org\ncomment: false\nvaline:\n  notify: false # mail notifier , https://github.com/xCss/Valine/wiki \n  verify: false # Verification code\n  appId: # your leancloud application appid\n  appKey: # your leancloud application appkey\n  placeholder: Just go go # comment box placeholder\n  avatar: mm # gravatar style\n  pageSize: 10 # pagination size\n  visitor: true # page view record\n\n# PWA \n# 你需要在 hexo 目录的 source 文件夹里创建一个 manifest.json 文件\nmanifest: false\nservice_workers: false\n\nnavColor: '3c484e'\n\n# Baidu 链接提交\nbaidu: false\n\n# Google Analytics\ngoogleAnalytics: false\nGA_TRACKING_ID: UA-XXXXXXXXXX-1\n\n```\n\n## 本地搜索功能参考\n\nhttps://github.com/wzpan/hexo-generator-search \nhttps://github.com/SuperKieran/hexo-generator-search-zip\n\n## 源主题的版权声明和 License \n\n[https://github.com/TryGhost/Casper/blob/master/LICENSE](https://github.com/TryGhost/Casper/blob/master/LICENSE)\n\n>本文章发表于底噪博客 https://zhih.me , 转载请注明\n>直接偷的人，你打球真蔡\n","tags":["web","hexo"],"categories":["教程"]},{"title":"如何在路由器上格式化U盘、硬盘","url":"/format-Upan-partition/","content":"\n## 引言\n\n本教程适用于梅林、padavan、LEDE（openwrt）等固件\n\n以下具体方法都基于 ext4，NTFS 相关错误不做回答\n\n使用ssh连接路由器，把U盘插到路由器上\n\n我们需要在命令行进行以下4步操作：\n\n## 安装fdisk\n\n一般梅林、Padavan 固件都会自带的，不用安装，如果没有则按照下面给出的命令\n\n```bash\nopkg update\nopkg install fdisk\n# 输出Configuring fdisk. 并且没有错误\n# fdisk就安装好了\n```\n\n## 查看你的设备\n\n```bash\nfdisk -l \n# 这里先输出系统分区之类的不用管，外置设备一般在最后\nDisk /dev/sda: 30.7 GB, 30752000000 bytes\n64 heads, 32 sectors/track, 29327 cylinders\nUnits = cylinders of 2048 * 512 = 1048576 bytes\nDevice Boot      Start         End      Blocks  Id System\n/dev/sda1               2       29327    30029824  83 Linux\n```\n\n上面的信息注意看到和你的存储大小一样的设备，我的是 `/dev/sda`，在它里面有个 `/dev/sda1`的分区\n\n## 删除分区、新建分区\n\n先卸载 U 盘，如果提示 `No such file or directory` 没关系，说明本来就没挂载上\n\n```bash\n# padavan、梅林可以执行以下这个推出 usb\nejusb\n\n# 其他固件，或者梅林使用以上命令无效，则可以使用这个命令卸载分区\numount /dev/sda1 \n```\n\n然后分区\n\n```bash\nfdisk /dev/sda # 这是你的设备別打成分区\n\nWelcome to fdisk (util-linux 2.29.2).\nChanges will remain in memory only, until you decide to write them.\nBe careful before using the write command.\n\nCommand (m for help): d \n# 输入d回车，我只有一个分区，它自动选择了，如果你有多个分区，可以多次使用d\nSelected partition 1\nPartition 1 has been deleted.\n\nCommand (m for help): n # 输入n会车，创建分区\nPartition type\np   primary (0 primary, 0 extended, 4 free)\ne   extended (container for logical partitions)\n\nSelect (default p): p # 选择p\nPartition number (1-4, default 1): # 输入 1 回车\nFirst sector (2048-2065023, default 2048): # 回车\nLast sector, +sectors or +size{K,M,G,T,P} (2048-2065023, default 2065023): # 回车\nCreated a new partition 1 of type 'Linux' and of size 1007.3 MiB.\n\nCommand (m for help): w # 输入 w 回车，保存并退出\nThe partition table has been altered.\nCalling ioctl() to re-read partition table.\nSyncing disks.\n```\n\n经过以上的操作，你可以用 `fdisk -l` 命令查看U盘上是否只有一个 Linux 分区\n\n```bash\nfdisk -l \n# 找到你的设备 可以看到ID为83就对了\nDisk /dev/sda: 30.7 GB, 30752000000 bytes\n64 heads, 32 sectors/track, 29327 cylinders\nUnits = cylinders of 2048 * 512 = 1048576 bytes\nDevice Boot      Start         End      Blocks  Id System\n/dev/sda1               2       29327    30029824  83 Linux\n```\n\n## 格式化分区\n\n分区已经有了，现在开始格式化\n\n用 `mkfs.ext4` 命令格式化，并且设置卷标为 onmp\n\n**注意**，如果下面的命令提示 `/dev/sda1 is mounted`，则需要先卸载 U 盘，和分区前卸载的方法一样\n\n```bash\nmkfs.ext4 -m 0 -L onmp /dev/sda1 \n# 如果你的硬盘比较大，256G以上的话，是下面这个命令：\n# mkfs.ext4 -m 0 -L ONMP -T largefile /dev/sda1\n\nmke2fs 1.42.8 (20-Jun-2013)\nFilesystem label=onmp\nOS type: Linux\nBlock size=4096 (log=2)\nFragment size=4096 (log=2)\nStride=0 blocks, Stripe width=0 blocks\n1880480 inodes, 7507456 blocks\n0 blocks (0.00%) reserved for the super user\nFirst data block=0\nMaximum filesystem blocks=0\n230 block groups\n32768 blocks per group, 32768 fragments per group\n8176 inodes per group\nSuperblock backups stored on blocks:\n        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,\n        4096000\n\nAllocating group tables: done\nWriting inode tables: done\nCreating journal (32768 blocks): done\nWriting superblocks and filesystem accounting information: done\n\n```\n\n这样，U盘就被格式化完了，拔插 U 盘可以重新挂载，或者你想用以下命令挂载也行\n\n```bash\nmkdir /mnt/onmp\nmount -t ext4 /dev/sda1 /mnt/onmp\n```\n\n>本文章发表于底噪博客 https://zhih.me , 转载请注明\n>直接偷的人，你打球真蔡\n\n","tags":["shell","路由器"],"categories":["教程"]},{"title":"ONMP安装教程","url":"/onmp-installation/","content":"\n## 前言\n\n之前用过极路由 1s，刷了恩山 H大的固件，发现内置了 web 环境，没想到一个路由器都能跑的动 LNMP。我之前最极限的尝试就是在一个 4刀3年 的 sentris ovz 小鸡上跑过 WordPress ，那台小鸡 配置很低，只有 64M 的内存😂。不过 LNMP 流畅运行的因素挺多，PHP 吃 CPU、MySQL 吃 IO，不同的程序表现也不一样。那台极路由被我折腾了没两下就放弃了在上面搭网站，毕竟性能太低。\n\n后来我上车了斐讯 K2P，拿回来花了一个晚上改好了 32+512+usb，刷的是灯大的硬改固件，少了H大固件的里面的丰富拓展，感觉都不对了，k2p 既然硬改了，那就好好玩它，之前不是嫌弃极 1s 的性能不足嘛，现在 K2P 比起它来说，性能强了一些，运存大、CPU强、还是 USB3.0，那就写个一键安装 web 环境吧，于是就有了这个项目。\n\n## 简述\n\nONMP 是一个 web 环境快速安装脚本，适用于安装了 [Entware](https://entware.net/) 的路由器，目前已经在 Padavan、LEDE（openwrt）、梅林上测试成功。\n\n和 LNMP 有什么不同？\nLNMP 代表的是：Linux 系统下 Nginx/MySQL/PHP 这种网站服务器架构，而为了区分路由器环境的不同，使用的 ONMP 这个命名，本质还是 LNMP。\n\n项目地址：https://github.com/xzhih/ONMP\n\n## 特性\n\n此脚本不仅自动化安装 web 环境，还内置了一些好用的网站程序一键免配置快速安装。\n\n```\nONMP内置了以下程序的一键安装：\n(1) phpMyAdmin（数据库管理工具）\n(2) WordPress（使用最广泛的CMS）\n(3) Owncloud（经典的私有云）\n(4) Nextcloud（Owncloud团队的新作，美观强大的个人云盘）\n(5) h5ai（优秀的文件目录）\n(6) Lychee（一个很好看，易于使用的Web相册）\n(7) Kodexplorer（可道云aka芒果云在线文档管理器）\n(8) Typecho (流畅的轻量级开源博客程序)\n(9) Z-Blog (体积小，速度快的PHP博客程序)\n(10) DzzOffice (开源办公平台)\n```\n\n## 安装教程\n\n### 1. 安装 Entware\n\nEntware 是一个适用于嵌入式系统的软件包库，使用 opkg 包管理系统进行管理，现在在官方的源上已经有超过2000个软件包了，可以说是非常的丰富\n\n不同的固件，安装方式都不一样，请认准安装方式（自己是什么固件总该懂得吧😂）\n\n[在 Padavan 上使用 Entware](https://zhih.me/Padavan-entware/)\n\n[在 LEDE 上使用 Entware](https://zhih.me/LEDE-entware)\n\n[在梅林上使用 Entware](https://zhih.me/Merlin-entware)\n\n### 2. 安装onmp\n\n一键命令，复制->粘贴->回车\n\n```bash\nsh -c \"$(curl -kfsSL https://raw.githubusercontent.com/xzhih/ONMP/master/oneclick.sh)\"\n```\n\n一长串的复制如果出错，可以按照以下给出的命令，一步步进行安装\n\n```bash\n# 进入 entware 挂载目录\ncd /opt && opkg install wget unzip \n\n# 下载软件包\nwget --no-check-certificate -O /opt/onmp.zip https://github.com/xzhih/ONMP/archive/master.zip \n\n# 解压\nunzip /opt/onmp.zip\n\ncd /opt/onmp\n\n# 运行\nchmod +x ./onmp.sh \n./onmp.sh\n```\n\n要是正常运行到脚本，会出现下面的情景，选1安装即可\n\n![安装](https://pic.zhih.me/blog/posts/onmp-installation/安装.jpg)\n\n正常安装中要是出现错误，会有错误信息，根据提示操作，目前得到的大多数反馈都是网络问题，因为 entware 的源在国外，而且他们的管理者说之前受到了来自亚洲的 DDOS，所以对这边限流了，速度较慢。遇到这种情况，可以去看看剧，没准回来的时候就好了😄\n\n安装成功得到的结果是这样的\n\n![安装成功](https://pic.zhih.me/blog/posts/onmp-installation/安装成功.jpg)\n\n如果你也是和上图一样，那么恭喜你，成功的安装上了 ONMP，你可以尽情的玩耍了\n\n## ONMP 详细使用教程\n\n### 基本命令：\n\n```\n管理：onmp open\n启动、停止、重启：onmp start|stop|restart\n查看网站列表：onmp list \n```\n\n### 设置数据库密码：\n\n输入 `onmp open` 后选择3，会提示 `Enter password:` ，这个时候要输入当前数据库的密码，比如我初始设置的数据库密码是 123456，回车后要是密码正确，会提示输入你要设置的新密码，回车后会提示再次输入确认。也就是，一次旧密码，两次新密码。\n\n这个位置很简单，但是很多人都说改不了密码，其实是没看提示，没输入旧密码，所以我写清楚一些。\n\n>本文章发表于底噪博客 https://zhih.me , 转载请注明\n>直接偷的人，你打球真蔡\n","tags":["onmp","shell"],"categories":["教程"]},{"title":"在Padavan 上使用Entware","url":"/Padavan-entware/","content":"\n## 前言\n\nEntware 是一个适用于嵌入式系统的软件包库，使用 opkg 包管理系统进行管理，现在在官方的源上已经有超过 2000 个软件包了，可以说是非常的丰富\n\n官方地址：[Entware](https://entware.net/)\n\n## U盘、硬盘格式化（可选）\n\n我们的设备本身的储存较少，而且如果哪天崩了，数据还有找不回的风险，所以我们一般把软件包和程序安装到 U 盘之类的外置设备上，所以需要对它进行格式化，以下教程全基于 ext4 分区格式，NTFS 格式我个人不推荐使用\n\n格式化教程：[如何在路由器上格式化U盘、硬盘](https://zhih.me/format-Upan-partition)\n\n## 安装 Entware\n\n### 1. 新建 opt 文件夹\n\n- 如果你是在电脑上格式化的 U 盘，并且知道怎么在电脑上读取 ext4 分区，那么在 ext4 分区的根目录新建一个 opt 文件夹\n\n- 或者你可以把 U 盘插到路由器上，开启 samba 并通过电脑访问 samba，在 U 盘下创建 opt 文件夹\n\n- 如果你上面的不会，并且按照我的教程在路由器上格式化 U 盘，还可以按照以下做法\n\n```bash\nejusb\nmkdir /media/onmp\nmount -t ext4 /dev/sda1 /media/onmp\n# /dev/sda1 是你的 ext4 分区\n\nmkdir /media/onmp/opt\n```\n\n这样就创建好 opt 文件夹了，之后装的所有东西都会在里面\n\n### 2. 开启 Entware\n\n先卸载 U 盘\n\n```bash\nejusb\n```\n\n然后在路由器管理页打开 Entware\n\n![在 Padavan 上使用 entware ](https://pic.zhih.me/blog/posts/Padavan-entware/在Padavan上使用entware.jpg)\n\n拔下 U 盘再重新插入，等一小会儿\n\n### 3. 查看是否成功挂载 /opt\n\n进入 shell，输入 `df -h`，看到 `/opt` 挂载了就对了\n\n![查看是否成功挂载 /opt](https://pic.zhih.me/blog/posts/Padavan-entware/查看是否成功挂载.jpg)\n\n如果 opt 没挂载，说明没安装上，请保证 opt 文件夹已经创建正确，确认无误，则可以进 shell 输入 `opkg.sh` 回车安装\n\n如果使用固件自带脚本出现错误，可以尝试使用以下脚本\n\n```bash\nwget -O - http://bin.entware.net/mipselsf-k3.4/installer/generic.sh | /bin/sh\n```\n\n### 测试 opkg 命令\n\n以上步骤之后，不出意外就装上了，我们现在可以测试一下\n\n```bash\nopkg update\n```\n\n## 其他\n\n[在 LEDE 上使用 Entware](https://zhih.me/LEDE-entware/)\n\n[在梅林上使用 Entware](https://zhih.me/Merlin-entware/)\n\nONMP 是一个 web 环境快速安装脚本，适用于安装了 [Entware](https://entware.net/) 的路由器，目前已经在 Padavan、LEDE（openwrt）、梅林上测试成功。\n\n[ONMP 安装教程](https://zhih.me/onmp-installation/)\n\n>本文章发表于底噪博客 https://zhih.me , 转载请注明\n>直接偷的人，你打球真蔡\n\n","tags":["onmp","entware"],"categories":["教程"]},{"title":"在LEDE上使用Entware","url":"/LEDE-entware/","content":"\n## 引言\n\nEntware 是一个适用于嵌入式系统的软件包库，使用 opkg 包管理系统进行管理，现在在官方的源上已经有超过2000个软件包了，可以说是非常的丰富\n\n官方地址：[Entware](https://entware.net/)\n\n## U盘、硬盘格式化（可选）\n\n我们的设备本身的储存较少，而且如果哪天崩了，数据还有找不回的风险，所以我们一般把软件包和程序安装到U盘之类的外置设备上，所以需要对它进行格式化，NTFS 格式我个人不推荐使用\n\n格式化教程：[如何在路由器上格式化U盘、硬盘](https://zhih.me/format-Upan-partition)\n\n## 一键安装\n\n用以下命令可以实现一键安装，此脚本只支持 ext4 分区\n\n运行命令，选择要安装到的分区，等待安装完成\n\n```bash \nsh -c \"$(curl -kfsSL https://raw.githubusercontent.com/xzhih/ONMP/master/lede-ent.sh)\"\n```\n\n如果提示找不到 curl 命令，可以用下面这个方法\n\n```bash\ncd /tmp\nwget -c -O https://raw.githubusercontent.com/xzhih/ONMP/master/lede-ent.sh\nchmod +x ./lede-ent.sh\n./lede-ent.sh\n```\n\n一键安装如果出错，或者重启后 Entware 失效，可以使用下面的手动安装\n\n## 手动安装\n\n手动安装可一键安装不同，一键安装使用软连接 opt 的方式，而手动则是以挂载点的方式，可以说更稳定\n\n### U盘挂载\n\n分区、格式都没问题之后，开始挂载\n\n```bash\nmkdir /mnt/onmp\n```\n\n#### 挂载方法1\n\n```bash\nmount -t ext4 /dev/sda1 /mnt/onmp\n# 这样就挂载上了\n\ndf -h\nFilesystem                Size      Used Available Use% Mounted on\n/dev/sda1               975.5M      2.5M    906.6M   0% /mnt/onmp\n# 可以看到已经挂载\n```\n\n#### 挂载方法2（推荐）\n\n```bash\nvi /etc/fstab # 按一下i编辑文件\n\n# 添加下面这一行\n/dev/sda1 /mnt/onmp ext4 defaults 0 1 \n# 按一下Esc再输入冒号`:`，输入wq回车保存\n\n# 以后每次要挂载就直接输入这个命令\nmount -a \n```\n\n开机自动挂载\n\n```bash\nvi /etc/rc.local # 编辑，vim基本用法和上面一样\n\n# 在exit 0之前添加以下命令，开机后会自动执行挂载\nmount -a \n```\n\n### 安装和使用 Entware\n\n#### 1. 挂载opt\n\n在U盘上创建一个空的 opt 文件夹\n\n```bash\nmkdir /mnt/onmp/opt\n```\n\n在系统根目录创建 opt 文件夹，并绑定U盘的 opt 文件夹\n\n```bash\nmkdir /opt\nmount -o bind /mnt/onmp/opt /opt\n# 可以用 mount 或 df -h 命令查看是否挂载成功\n```\n\n#### 2. 运行 Entware 安装命令\n\n不同的 CPU 平台有不同的命令，可以使用 `uname -m` 命令查看平台\n\n- armv5\n\n```bash\nwget -O - http://bin.entware.net/armv5sf-k3.2/installer/generic.sh | /bin/sh\n```\n\n- armv7\n\n```bash\nwget -O - http://bin.entware.net/armv7sf-k3.2/installer/generic.sh | /bin/sh\n```\n\n- armv8 (aarch64)\n\n```bash\nwget -O - http://bin.entware.net/aarch64-k3.10/installer/generic.sh | /bin/sh\n```\n\n- x86-64\n\n```bash\nwget -O - http://bin.entware.net/x64-k3.2/installer/generic.sh | /bin/sh\n```\n\n- MIPS\n\n```bash\nwget -O - http://bin.entware.net/mipselsf-k3.4/installer/generic.sh | /bin/sh\n```\n\n在输入命令之后之后会自己跑起来，出现以下结果就代表成功，没成功的记得把U盘上的opt文件夹清空再来\n\n```\nInfo: Congratulations!\nInfo: If there are no errors above then Entware was successfully initialized.\n```\n\n#### 3. 开机启动\n\n编辑 `/etc/rc.local` 将以下代码加在 `exit 0` 之前，`mount -a` 之后\n\n```\nmkdir -p /opt\nmount -o bind /mnt/onmp/opt /opt\n/opt/etc/init.d/rc.unslung start\n```\n\n#### 4. 环境变量\n\n编辑 `/etc/profile` 在他的最后加入以下代码\n\n```\n. /opt/etc/profile\n```\n\n这样开机之后将会添加 `/opt/bin` 和 `/opt/sbin` 到环境变量 PATH 里\n\n**注意**，`.` 的后面有一个空格，不是连着的\n\n#### 5. 重启\n\n重启之后，可以使用一下命令检查是否成功\n\n```bash\n# 检查环境变量\necho $PATH\n# 可以看到已经有/opt的路径了\n/opt/bin:/opt/sbin:/usr/sbin:/usr/bin:/sbin:/bin \n\n# 检查 `/opt` 挂载情况\ndf -h\n/dev/sda1               975.5M     13.9M    895.2M   2% /mnt/onmp # U盘挂载成功\n/dev/sda1               975.5M     13.9M    895.2M   2% /opt # opt挂载成功\n\n# opkg 更新数据\nopkg update\nDownloading http://pkg.entware.net/binaries/x86-64/Packages.gz \nUpdated list of available packages in /opt/var/opkg-lists/packages # 成功\n```\n\n经过以上步骤，已经可以从 `Entware` 上进行下载安装包并安装到U盘上\n\n这下可以享受丰富的软件包，还不占用内部储存空间，非常适合LEDE软路由\n我的 onmp 一键包也可以在 LEDE 上使用了\n\n## Tips\n\n每次升级固件后如果失效了，重新设置开机启动和环境变量即可\n\n## PS \n\n[在梅林上使用Entware](https://zhih.me/Merlin-entware/)\n\n[在Padavan上使用entware](https://zhih.me/Padavan-entware/)\n\nONMP 是一个 web 环境快速安装脚本，适用于安装了 [Entware](https://entware.net/) 的路由器，目前已经在 Padavan、LEDE（openwrt）、梅林上测试成功。\n\n[ONMP 安装教程](https://zhih.me/onmp-installation/)\n\n## 参考\n\n[Install on Synology NAS](https://github.com/Entware/Entware/wiki/Install-on-Synology-NAS)\n\n[How To Configure Routers Asus RT-N56U/RT-N65U For Entware Usage](https://bitbucket.org/padavan/rt-n56u/wiki/EN/HowToConfigureEntware)\n\n>本文章发表于底噪博客 https://zhih.me , 转载请注明\n>直接偷的人，你打球真蔡\n","tags":["LEDE","onmp","entware"],"categories":["教程"]},{"title":"在梅林上使用Entware","url":"/Merlin-entware/","content":"\n## 引言\n\nEntware 是一个适用于嵌入式系统的软件包库，使用 opkg 包管理系统进行管理，现在在官方的源上已经有超过 2000 个软件包了，可以说是非常的丰富\n\n官方地址：[Entware](https://entware.net/)\n\n## U盘、硬盘格式化（可选）\n\n我们的设备本身的储存较少，而且如果哪天崩了，数据还有找不回的风险，所以我们一般把软件包和程序安装到U盘之类的外置设备上，所以需要对它格式化为 ext4，NTFS 格式不推荐使用\n\n格式化教程：[如何在路由器上格式化U盘、硬盘](https://zhih.me/format-Upan-partition)\n\n## U盘挂载（可选）\n\n梅林固件可以在插入磁盘的时候自动识别文件系统并挂载，所以说是相当方便了，一般我们都不需要执行这一步，不过有些固件可能还没有很完善，所以我给出以下一种挂载的方法，供参考。\n\n分区、格式都没问题之后，开始挂载\n\n```bash\nmkdir /mnt/sda1\nmount -t ext4 /dev/sda1 /mnt/sda1/\n# 这样就挂载上了\ndf -h\nFilesystem                Size      Used Available Use% Mounted on\n/dev/sda1               975.5M      2.5M    906.6M   0% /tmp/mnt/sda1\n# 可以看到已经挂载\n```\n\n## 安装和使用 Entware\n\n梅林内置了一个安装命令很方便\n\n```bash\nentware-setup.sh\n\n# 然后会提示你选择哪个分区，就选择刚才挂载的那个\n···省略\nInfo:  Looking for available partitions...\n[1] --> /tmp/mnt/sda1\n=>  Please enter partition number or 0 to exit\n[0-1]: 1 # 选1回车\n···省略\n# 跑完之后只要不提示错误，就是安装成功了\n```\n\n经过以上步骤，已经可以从 Entware 上进行下载安装包并安装到U盘上\n\n这下可以享受丰富的软件包，还不占用内部储存空间\n\n## PS \n\n[在Padavan上使用entware](https://zhih.me/Padavan-entware/)\n\n[在LEDE上使用Entware](https://zhih.me/LEDE-entware/)\n\nONMP 是一个 web 环境快速安装脚本，适用于安装了 [Entware](https://entware.net/) 的路由器，目前已经在 Padavan、LEDE（openwrt）、梅林上测试成功。\n\n[ONMP 安装教程](https://zhih.me/onmp-installation/)\n\n>本文章发表于底噪博客 https://zhih.me , 转载请注明\n>直接偷的人，你打球真蔡\n\n","tags":["onmp","entware","梅林"],"categories":["教程"]}]